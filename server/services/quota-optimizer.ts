/**
 * Quota Optimization Service
 * Helps reduce API quota consumption through intelligent caching and optimization
 */

interface CachedResponse {
  content: string;
  timestamp: Date;
  expiryTime: Date;
  queryHash: string;
}

// Simple in-memory cache for responses
const responseCache = new Map<string, CachedResponse>();
const CACHE_DURATION = 30 * 60 * 1000; // 30 ph√∫t

/**
 * Generate hash cho query ƒë·ªÉ l√†m cache key
 */
function generateQueryHash(query: string): string {
  // Normalize query ƒë·ªÉ tƒÉng cache hit rate
  const normalized = query
    .toLowerCase()
    .trim()
    .replace(/\s+/g, ' ')
    .replace(/[^\w\s]/g, '');
  
  // Simple hash function
  let hash = 0;
  for (let i = 0; i < normalized.length; i++) {
    const char = normalized.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  return hash.toString();
}

/**
 * Ki·ªÉm tra c√≥ c√¢u tr·∫£ l·ªùi cached kh√¥ng
 */
export function getCachedResponse(query: string, type: 'chat' | 'learning' | 'webScraper' | 'deepSearch'): string | null {
  const queryHash = generateQueryHash(query);
  const cacheKey = `${type}_${queryHash}`;
  const cached = responseCache.get(cacheKey);
  
  if (cached && cached.expiryTime > new Date()) {
    console.log(`üíæ Using cached response for ${type}: ${query.substring(0, 50)}...`);
    return cached.content;
  }
  
  // X√≥a cache h·∫øt h·∫°n
  if (cached) {
    responseCache.delete(cacheKey);
  }
  
  return null;
}

/**
 * L∆∞u response v√†o cache
 */
export function setCachedResponse(query: string, response: string, type: 'chat' | 'learning' | 'webScraper' | 'deepSearch'): void {
  const queryHash = generateQueryHash(query);
  const cacheKey = `${type}_${queryHash}`;
  const now = new Date();
  
  responseCache.set(cacheKey, {
    content: response,
    timestamp: now,
    expiryTime: new Date(now.getTime() + CACHE_DURATION),
    queryHash
  });
  
  // Cleanup old cache entries (keep max 100 entries)
  if (responseCache.size > 100) {
    const oldestKey = responseCache.keys().next().value;
    if (oldestKey) {
      responseCache.delete(oldestKey);
    }
  }
}

/**
 * Ki·ªÉm tra xem c√≥ n√™n skip t·∫°o ·∫£nh/video kh√¥ng
 */
export function shouldSkipExpensiveOperation(type: 'image' | 'video', dailyUsage: { images: number; videos: number }): { skip: boolean; reason?: string } {
  const limits = {
    image: 15, // Gi·ªõi h·∫°n 15 ·∫£nh/ng√†y
    video: 5   // Gi·ªõi h·∫°n 5 video/ng√†y
  };
  
  if (type === 'image' && dailyUsage.images >= limits.image) {
    return {
      skip: true,
      reason: `‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${limits.image} ·∫£nh/ng√†y. ƒê·ªÉ ti·∫øt ki·ªám quota, h√£y th·ª≠ m√¥ t·∫£ b·∫±ng vƒÉn b·∫£n.`
    };
  }
  
  if (type === 'video' && dailyUsage.videos >= limits.video) {
    return {
      skip: true,
      reason: `‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${limits.video} video/ng√†y. ƒê·ªÉ ti·∫øt ki·ªám quota, h√£y th·ª≠ m√¥ t·∫£ b·∫±ng vƒÉn b·∫£n ho·∫∑c t·∫°o ·∫£nh thay th·∫ø.`
    };
  }
  
  return { skip: false };
}

/**
 * T·ªëi ∆∞u h√≥a prompt ƒë·ªÉ gi·∫£m token usage
 */
export function optimizePrompt(prompt: string): string {
  // Lo·∫°i b·ªè t·ª´ th·ª´a v√† t·ªëi ∆∞u h√≥a
  return prompt
    .replace(/\s+/g, ' ') // Nhi·ªÅu space th√†nh 1
    .replace(/\n+/g, '\n') // Nhi·ªÅu newline th√†nh 1
    .trim()
    .substring(0, 8000); // Gi·ªõi h·∫°n ƒë·ªô d√†i prompt
}

/**
 * ƒê·ªÅ xu·∫•t alternatives ƒë·ªÉ ti·∫øt ki·ªám quota
 */
export function suggestQuotaSavingAlternatives(query: string): string[] {
  const suggestions: string[] = [];
  
  const lowerQuery = query.toLowerCase();
  
  // N·∫øu h·ªèi v·ªÅ th√¥ng tin th·ªùi s·ª±
  if (lowerQuery.includes('tin t·ª©c') || lowerQuery.includes('h√¥m nay') || lowerQuery.includes('m·ªõi nh·∫•t')) {
    suggestions.push('üí° S·ª≠ d·ª•ng DeepSearch thay v√¨ h·ªèi AI ƒë·ªÉ ti·∫øt ki·ªám quota cho th√¥ng tin th·ªùi s·ª±');
  }
  
  // N·∫øu h·ªèi v·ªÅ t·∫°o ·∫£nh
  if (lowerQuery.includes('t·∫°o ·∫£nh') || lowerQuery.includes('v·∫Ω') || lowerQuery.includes('h√¨nh ·∫£nh')) {
    suggestions.push('üí° Th·ª≠ m√¥ t·∫£ chi ti·∫øt b·∫±ng vƒÉn b·∫£n tr∆∞·ªõc khi t·∫°o ·∫£nh ƒë·ªÉ ti·∫øt ki·ªám quota');
  }
  
  // N·∫øu h·ªèi v·ªÅ video
  if (lowerQuery.includes('video') || lowerQuery.includes('phim')) {
    suggestions.push('üí° C√¢n nh·∫Øc t·∫°o ·∫£nh tƒ©nh thay v√¨ video ƒë·ªÉ ti·∫øt ki·ªám quota ƒë√°ng k·ªÉ');
  }
  
  // N·∫øu h·ªèi c√¢u h·ªèi d√†i
  if (query.length > 500) {
    suggestions.push('üí° Chia th√†nh c√¢u h·ªèi ng·∫Øn h∆°n ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác s·ª≠ d·ª•ng API');
  }
  
  return suggestions;
}

/**
 * L·∫•y th·ªëng k√™ cache
 */
export function getCacheStats() {
  const now = new Date();
  const validEntries = Array.from(responseCache.values()).filter(entry => entry.expiryTime > now);
  
  return {
    totalEntries: responseCache.size,
    validEntries: validEntries.length,
    expiredEntries: responseCache.size - validEntries.length,
    cacheHitPotential: validEntries.length > 0 ? '‚úÖ C√≥ th·ªÉ ti·∫øt ki·ªám quota t·ª´ cache' : '‚ö†Ô∏è Cache tr·ªëng'
  };
}

/**
 * D·ªçn d·∫πp cache h·∫øt h·∫°n
 */
export function cleanupExpiredCache(): number {
  const now = new Date();
  let removedCount = 0;
  
  for (const [key, entry] of Array.from(responseCache.entries())) {
    if (entry.expiryTime <= now) {
      responseCache.delete(key);
      removedCount++;
    }
  }
  
  return removedCount;
}