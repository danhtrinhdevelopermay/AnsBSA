import Groq from "groq-sdk";
import { CohereClient } from 'cohere-ai';
import axios from 'axios';

// Free AI services with generous quotas
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY || ""
});

const cohere = new CohereClient({
  token: process.env.COHERE_API_KEY || ""
});

// Offline fallback responses for common Vietnamese queries
const offlineResponses = {
  greetings: [
    "Xin ch√†o! T√¥i l√† AI Assistant ti·∫øng Vi·ªát. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o video, h√¨nh ·∫£nh, v√† ph√°t tri·ªÉn web.",
    "Ch√†o b·∫°n! T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c t√≠nh nƒÉng AI: t·∫°o video, h√¨nh ·∫£nh, v√† l·∫≠p tr√¨nh web.",
    "Hi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o n·ªôi dung AI v√† ph√°t tri·ªÉn web. B·∫°n mu·ªën th·ª≠ t√≠nh nƒÉng g√¨?"
  ],
  
  help: [
    "üéØ **T√≠nh nƒÉng ch√≠nh:**\n‚Ä¢ **T·∫°o video AI** - M√¥ t·∫£ video b·∫°n mu·ªën\n‚Ä¢ **T·∫°o h√¨nh ·∫£nh** - M√¥ t·∫£ h√¨nh ·∫£nh c·∫ßn thi·∫øt\n‚Ä¢ **Ph√°t tri·ªÉn web** - T·∫°o website t·ª± ƒë·ªông\n‚Ä¢ **Chat AI** - Tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi",
    "üí° **C√°c l·ªánh h·ªØu √≠ch:**\n‚Ä¢ 'T·∫°o video con m√®o ƒëang ch·∫°y'\n‚Ä¢ 'T·∫°o h√¨nh ·∫£nh phong c·∫£nh ƒë·∫πp'\n‚Ä¢ 'T·∫°o website portfolio cho t√¥i'\n‚Ä¢ 'Gi√∫p t√¥i code JavaScript'"
  ],
  
  programming: [
    "üåê **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l·∫≠p tr√¨nh:**\n‚Ä¢ JavaScript, HTML, CSS\n‚Ä¢ React, Node.js\n‚Ä¢ Python c∆° b·∫£n\n‚Ä¢ T·∫°o website t·ª± ƒë·ªông\n\nB·∫°n mu·ªën code g√¨?",
    "üíª **Ph√°t tri·ªÉn web:**\nT√¥i c√≥ th·ªÉ t·ª± ƒë·ªông t·∫°o:\n‚Ä¢ Portfolio website\n‚Ä¢ Landing page\n‚Ä¢ Blog c√° nh√¢n\n‚Ä¢ ·ª®ng d·ª•ng web ƒë∆°n gi·∫£n"
  ],
  
  video: [
    "üé¨ **T·∫°o video AI:**\nH·ªá th·ªëng h·ªó tr·ª£ nhi·ªÅu d·ªãch v·ª• mi·ªÖn ph√≠:\n‚Ä¢ Hugging Face (ƒë√£ c·∫•u h√¨nh)\n‚Ä¢ Replicate (c·∫ßn API token)\n‚Ä¢ fal.ai (tr·∫£ ph√≠)\n\nM√¥ t·∫£ video b·∫°n mu·ªën t·∫°o!",
    "üé• **Video generation:**\nCh·ªâ c·∫ßn m√¥ t·∫£ video, t√¥i s·∫Ω t·∫°o cho b·∫°n:\n‚Ä¢ Video 5-15 gi√¢y\n‚Ä¢ Ch·∫•t l∆∞·ª£ng HD\n‚Ä¢ L∆∞u t·ª± ƒë·ªông v√†o workspace"
  ],
  
  image: [
    "üé® **T·∫°o h√¨nh ·∫£nh AI:**\n‚Ä¢ M√¥ t·∫£ h√¨nh ·∫£nh b·∫°n mu·ªën\n‚Ä¢ H·ªó tr·ª£ ti·∫øng Vi·ªát ho√†n to√†n\n‚Ä¢ T·ª± ƒë·ªông l∆∞u v√†o workspace\n‚Ä¢ Ch·∫•t l∆∞·ª£ng cao\n\nV√≠ d·ª•: 'T·∫°o ·∫£nh con m√®o d·ªÖ th∆∞∆°ng'",
    "üñºÔ∏è **Image generation:**\nT√≠nh nƒÉng t·∫°o ·∫£nh AI v·ªõi:\n‚Ä¢ M√¥ t·∫£ b·∫±ng ti·∫øng Vi·ªát\n‚Ä¢ Ch·∫•t l∆∞·ª£ng cao\n‚Ä¢ L∆∞u tr·ª±c ti·∫øp v√†o d·ª± √°n"
  ]
};

export async function generateFreeAIResponse(message: string, history: any[] = []): Promise<string> {
  const messageText = message.toLowerCase().trim();
  
  // Try free AI services first
  try {
    // 1. Try Groq (very generous free tier)
    if (process.env.GROQ_API_KEY) {
      console.log('üîÑ Trying Groq AI...');
      const response = await groq.chat.completions.create({
        messages: [
          { role: "system", content: "B·∫°n l√† AI Assistant ti·∫øng Vi·ªát th√¥ng minh, h·ªØu √≠ch v√† th√¢n thi·ªán. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† ch√≠nh x√°c." },
          ...history.map(msg => ({ role: msg.role, content: msg.content })),
          { role: "user", content: message }
        ],
        model: "llama-3.1-70b-versatile", // Free model
        temperature: 0.7,
        max_tokens: 1024
      });
      
      if (response.choices[0]?.message?.content) {
        return response.choices[0].message.content;
      }
    }
    
    // 2. Try Cohere (free tier available)
    if (process.env.COHERE_API_KEY) {
      console.log('üîÑ Trying Cohere AI...');
      const response = await cohere.chat({
        message: message,
        model: "command-r", // Free model
        temperature: 0.7,
        maxTokens: 1024,
        preamble: "B·∫°n l√† AI Assistant ti·∫øng Vi·ªát th√¥ng minh v√† h·ªØu √≠ch. Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát."
      });
      
      if (response.text) {
        return response.text;
      }
    }
    
    // 3. Try Hugging Face Inference API (completely free)
    if (process.env.HUGGINGFACE_TOKEN) {
      console.log('üîÑ Trying Hugging Face Chat...');
      try {
        const response = await axios.post(
          'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',
          { inputs: message },
          {
            headers: {
              'Authorization': `Bearer ${process.env.HUGGINGFACE_TOKEN}`,
              'Content-Type': 'application/json'
            },
            timeout: 30000
          }
        );
        
        if (response.data && response.data[0]?.generated_text) {
          return response.data[0].generated_text;
        }
      } catch (error) {
        console.log('Hugging Face chat failed, trying Vietnamese model...');
        
        // Try Vietnamese-specific model
        try {
          const vnResponse = await axios.post(
            'https://api-inference.huggingface.co/models/VietAI/vit5-base-vietnews-summarization',
            { inputs: `Tr·∫£ l·ªùi c√¢u h·ªèi: ${message}` },
            {
              headers: {
                'Authorization': `Bearer ${process.env.HUGGINGFACE_TOKEN}`,
                'Content-Type': 'application/json'
              },
              timeout: 30000
            }
          );
          
          if (vnResponse.data && vnResponse.data[0]?.generated_text) {
            return vnResponse.data[0].generated_text;
          }
        } catch (vnError) {
          console.log('Vietnamese model also failed');
        }
      }
    }
    
  } catch (error) {
    console.log('Free AI services unavailable, using offline fallback');
  }
  
  // Fallback to offline responses
  return generateOfflineResponse(messageText);
}

function generateOfflineResponse(messageText: string): string {
  // Detect intent and provide contextual response
  if (messageText.includes('hi') || messageText.includes('hello') || messageText.includes('ch√†o') || messageText.includes('xin ch√†o')) {
    return getRandomResponse(offlineResponses.greetings);
  }
  
  if (messageText.includes('help') || messageText.includes('gi√∫p') || messageText.includes('h∆∞·ªõng d·∫´n') || messageText.includes('l√†m g√¨')) {
    return getRandomResponse(offlineResponses.help);
  }
  
  if (messageText.includes('video')) {
    return `üé¨ **T√≠nh nƒÉng t·∫°o video AI**

T√¥i c√≥ th·ªÉ t·∫°o video AI cho b·∫°n! H·ªá th·ªëng h·ªó tr·ª£ c√°c d·ªãch v·ª•:

**üÜì Mi·ªÖn ph√≠:**
‚Ä¢ **AnimateDiff** - Text-to-video & image-to-video mi·ªÖn ph√≠  
‚Ä¢ **Hugging Face** - Token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
‚Ä¢ **Replicate** - Tin c·∫≠y nh·∫•t (c·∫ßn API token)

**üíé Tr·∫£ ph√≠:**
‚Ä¢ **fal.ai** - Ch·∫•t l∆∞·ª£ng cao ($0.40/video)

**üéØ Th·ª≠ ngay:**
‚Ä¢ **Text-to-Video:** "T·∫°o video con m√®o ƒëang ch·∫°y"
‚Ä¢ **Image-to-Video:** "AnimateDiff: bi·∫øn ·∫£nh th√†nh video" 
‚Ä¢ **Animate ·∫£nh:** T·∫°o ·∫£nh tr∆∞·ªõc, sau ƒë√≥ "t·∫°o video t·ª´ ·∫£nh n√†y"`;
  }
  
  if (messageText.includes('·∫£nh') || messageText.includes('h√¨nh') || messageText.includes('image')) {
    return getRandomResponse(offlineResponses.image);
  }
  
  if (messageText.includes('code') || messageText.includes('l·∫≠p tr√¨nh') || messageText.includes('web') || messageText.includes('website')) {
    return getRandomResponse(offlineResponses.programming);
  }
  
  // Default helpful response
  return `üëã **T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: "${messageText}"**

ü§ñ **Hi·ªán t·∫°i API t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng**, nh∆∞ng t√¥i v·∫´n c√≥ th·ªÉ:

**üéØ T√≠nh nƒÉng ho·∫°t ƒë·ªông:**
‚Ä¢ **T·∫°o video AI** - "T·∫°o video con m√®o ƒëang ch·∫°y"
‚Ä¢ **T·∫°o h√¨nh ·∫£nh** - "T·∫°o ·∫£nh phong c·∫£nh ƒë·∫πp"  
‚Ä¢ **Ph√°t tri·ªÉn web** - "T·∫°o website portfolio"
‚Ä¢ **Chat c∆° b·∫£n** - Tr·∫£ l·ªùi c√¢u h·ªèi th∆∞·ªùng g·∫∑p

**üí° ƒê·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t:**
‚Ä¢ Th·ª≠ t√≠nh nƒÉng t·∫°o video/·∫£nh (kh√¥ng c·∫ßn quota)
‚Ä¢ S·ª≠ d·ª•ng t√≠nh nƒÉng Web Builder
‚Ä¢ Ch·ªù API ph·ª•c h·ªìi sau v√†i gi·ªù

B·∫°n mu·ªën th·ª≠ t√≠nh nƒÉng n√†o?`;
}

function getRandomResponse(responses: string[]): string {
  return responses[Math.floor(Math.random() * responses.length)];
}

// Check if any free AI service is available
export function hasFreeTier(): boolean {
  return !!(process.env.GROQ_API_KEY || process.env.COHERE_API_KEY || process.env.HUGGINGFACE_TOKEN);
}

// Setup guide for free AI services
export function getFreeAISetupGuide(): string {
  return `üÜì **GI·∫¢I PH√ÅP QUOTA-FREE: AI Chat Mi·ªÖn Ph√≠**

**üèÜ D·ªäCH V·ª§ AI MI·ªÑN PH√ç (Kh√¥ng gi·ªõi h·∫°n quota):**

**1. Groq AI (Khuy·∫øn ngh·ªã)** ‚≠ê
‚Ä¢ **T·ªëc ƒë·ªô**: C·ª±c nhanh (300+ tokens/gi√¢y)
‚Ä¢ **Quota**: 6,000 requests/ph√∫t MI·ªÑN PH√ç
‚Ä¢ **Model**: Llama 3.1 70B
‚Ä¢ **Setup**: https://console.groq.com/keys

**2. Cohere AI**
‚Ä¢ **Quota**: 1,000 requests/th√°ng mi·ªÖn ph√≠
‚Ä¢ **Model**: Command-R
‚Ä¢ **Setup**: https://dashboard.cohere.com/api-keys

**3. Hugging Face (ƒê√£ c√≥ token)** ‚úÖ
‚Ä¢ **Quota**: Ho√†n to√†n mi·ªÖn ph√≠, kh√¥ng gi·ªõi h·∫°n
‚Ä¢ **Model**: DialoGPT, Vietnamese models
‚Ä¢ **Setup**: Token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn

**üîß H∆Ø·ªöNG D·∫™N NHANH:**
1. ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠ t·∫°i link tr√™n
2. T·∫°o API key 
3. Th√™m v√†o ·ª©ng d·ª•ng
4. Chat kh√¥ng gi·ªõi h·∫°n!

**üí° ∆ØU ƒêI·ªÇM:**
‚Ä¢ Kh√¥ng h·∫øt quota nh∆∞ Gemini
‚Ä¢ T·ªëc ƒë·ªô nhanh h∆°n
‚Ä¢ H·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët
‚Ä¢ Ho√†n to√†n mi·ªÖn ph√≠

**üéØ FALLBACK SYSTEM:**
Ngay c·∫£ khi kh√¥ng c√≥ API key, ·ª©ng d·ª•ng v·∫´n:
‚Ä¢ Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n h·ªØu √≠ch
‚Ä¢ H·ªó tr·ª£ t√≠nh nƒÉng t·∫°o video/·∫£nh  
‚Ä¢ Web development v·∫´n ho·∫°t ƒë·ªông
‚Ä¢ Kh√¥ng bao gi·ªù l·ªói 500

B·∫°n mu·ªën setup d·ªãch v·ª• n√†o tr∆∞·ªõc?`;
}