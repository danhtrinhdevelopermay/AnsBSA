import axios from 'axios';
import { GoogleGenerativeAI } from "@google/generative-ai";
import { getBestGeminiAPI, handleGeminiAPIFailure } from "./gemini-manager";

// Use multi-API Gemini manager

export interface WebScrapingResult {
  success: boolean;
  url: string;
  title?: string;
  content?: string;
  summary?: string;
  keyPoints?: string[];
  error?: string;
  timestamp: Date;
}

/**
 * Truy c·∫≠p v√† ph√¢n t√≠ch website
 */
export async function scrapeAndAnalyzeWebsite(url: string): Promise<WebScrapingResult> {
  try {
    console.log(`üåê Starting website analysis for: ${url}`);
    
    // Validate URL
    if (!isValidUrl(url)) {
      return {
        success: false,
        url,
        error: 'URL kh√¥ng h·ª£p l·ªá',
        timestamp: new Date()
      };
    }

    // Fetch website content
    const webContent = await fetchWebsiteContent(url);
    if (!webContent.success || !webContent.content) {
      return {
        success: false,
        url,
        error: webContent.error || 'Kh√¥ng th·ªÉ t·∫£i n·ªôi dung website',
        timestamp: new Date()
      };
    }

    // Analyze content with AI
    const analysis = await analyzeContentWithAI(webContent.content, url);
    
    return {
      success: true,
      url,
      title: webContent.title,
      content: webContent.content,
      summary: analysis.summary,
      keyPoints: analysis.keyPoints,
      timestamp: new Date()
    };

  } catch (error: any) {
    console.error('Website scraping error:', error.message);
    return {
      success: false,
      url,
      error: `L·ªói khi truy c·∫≠p website: ${error.message}`,
      timestamp: new Date()
    };
  }
}

/**
 * Fetch content t·ª´ website
 */
async function fetchWebsiteContent(url: string): Promise<{
  success: boolean;
  content?: string;
  title?: string;
  error?: string;
}> {
  try {
    const response = await axios.get(url, {
      timeout: 15000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      },
      maxRedirects: 5,
      maxContentLength: 10 * 1024 * 1024 // 10MB limit
    });

    if (response.status !== 200) {
      return {
        success: false,
        error: `HTTP ${response.status}: ${response.statusText}`
      };
    }

    const html = response.data;
    
    // Extract title
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    const title = titleMatch ? titleMatch[1].trim() : 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ';

    // Clean and extract text content
    const cleanContent = extractTextFromHTML(html);
    
    // More lenient content length check and better error messages
    if (cleanContent.length < 50) {
      return {
        success: false,
        error: 'Website c√≥ th·ªÉ y√™u c·∫ßu ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c√≥ n·ªôi dung c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c'
      };
    }
    
    if (cleanContent.length < 100) {
      // Still try to analyze if we have some content
      console.log(`‚ö†Ô∏è Website has limited content (${cleanContent.length} chars): ${url}`);
    }

    return {
      success: true,
      content: cleanContent,
      title
    };

  } catch (error: any) {
    console.error(`Web scraping error for ${url}:`, error.message);
    
    if (error.code === 'ECONNREFUSED') {
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn website - Server c√≥ th·ªÉ ƒëang t·∫Øt'
      };
    } else if (error.code === 'ENOTFOUND') {
      return {
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y website - Ki·ªÉm tra l·∫°i URL'
      };
    } else if (error.code === 'ECONNABORTED') {
      return {
        success: false,
        error: 'Website ph·∫£n h·ªìi qu√° ch·∫≠m - Th·ª≠ l·∫°i sau'
      };
    } else if (error.response?.status === 403) {
      return {
        success: false,
        error: 'Website t·ª´ ch·ªëi truy c·∫≠p - C√≥ th·ªÉ c·∫ßn ƒëƒÉng nh·∫≠p'
      };
    } else if (error.response?.status === 404) {
      return {
        success: false,
        error: 'Trang kh√¥ng t·ªìn t·∫°i - Ki·ªÉm tra l·∫°i URL'
      };
    } else if (error.response?.status === 401) {
      return {
        success: false,
        error: 'Website y√™u c·∫ßu ƒëƒÉng nh·∫≠p'
      };
    } else if (error.response?.status >= 500) {
      return {
        success: false,
        error: 'Website ƒëang g·∫∑p s·ª± c·ªë - Th·ª≠ l·∫°i sau'
      };
    } else {
      return {
        success: false,
        error: `L·ªói truy c·∫≠p: ${error.message}`
      };
    }
  }
}

/**
 * Tr√≠ch xu·∫•t text t·ª´ HTML
 */
function extractTextFromHTML(html: string): string {
  // Remove script and style elements
  let text = html.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
  text = text.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
  text = text.replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, '');
  
  // Remove HTML tags
  text = text.replace(/<[^>]+>/g, ' ');
  
  // Decode HTML entities
  text = text.replace(/&nbsp;/g, ' ');
  text = text.replace(/&amp;/g, '&');
  text = text.replace(/&lt;/g, '<');
  text = text.replace(/&gt;/g, '>');
  text = text.replace(/&quot;/g, '"');
  text = text.replace(/&#39;/g, "'");
  text = text.replace(/&apos;/g, "'");
  
  // Clean up whitespace
  text = text.replace(/\s+/g, ' ');
  text = text.trim();
  
  // Limit length to avoid token limits
  if (text.length > 20000) {
    text = text.substring(0, 20000) + '...';
  }
  
  return text;
}

/**
 * Ph√¢n t√≠ch n·ªôi dung b·∫±ng AI
 */
async function analyzeContentWithAI(content: string, url: string): Promise<{
  summary: string;
  keyPoints: string[];
}> {
  try {
    const analysisPrompt = `
Ph√¢n t√≠ch n·ªôi dung website sau v√† t·∫°o t√≥m t·∫Øt chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát:

URL: ${url}
N·ªòI DUNG:
${content}

Y√äU C·∫¶U:
1. T√≥m t·∫Øt ch√≠nh x√°c n·ªôi dung ch√≠nh (3-5 c√¢u)
2. Li·ªát k√™ 5-7 ƒëi·ªÉm quan tr·ªçng nh·∫•t
3. S·ª≠ d·ª•ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu
4. T·∫≠p trung v√†o th√¥ng tin h·ªØu √≠ch cho ng∆∞·ªùi ƒë·ªçc

Tr·∫£ v·ªÅ JSON format:
{
  "summary": "T√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa website...",
  "keyPoints": [
    "ƒêi·ªÉm quan tr·ªçng 1",
    "ƒêi·ªÉm quan tr·ªçng 2",
    "ƒêi·ªÉm quan tr·ªçng 3"
  ]
}`;

    // Get best available API for web scraping
    const apiInfo = getBestGeminiAPI('webScraper');
    if (!apiInfo) {
      console.log('No Gemini API available for web scraping');
      return {
        summary: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch n·ªôi dung website do thi·∫øu API.',
        keyPoints: ['C·∫ßn c·∫•u h√¨nh API key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ph√¢n t√≠ch website']
      };
    }

    const { config: apiConfig, clients } = apiInfo;
    const model = clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    console.log(`üîç Using Gemini API: ${apiConfig.name} for web scraping analysis`);

    const result = await model.generateContent(analysisPrompt);
    const response = result.response.text();
    
    try {
      // Extract JSON from response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          summary: parsed.summary || 'Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt',
          keyPoints: parsed.keyPoints || []
        };
      }
    } catch (parseError) {
      console.error('Failed to parse AI analysis:', parseError);
    }
    
    // Fallback: create basic analysis
    return {
      summary: `ƒê√£ ph√¢n t√≠ch n·ªôi dung t·ª´ ${url}. Website ch·ª©a th√¥ng tin v·ªÅ ${content.substring(0, 200)}...`,
      keyPoints: [
        'ƒê√£ truy c·∫≠p th√†nh c√¥ng website',
        'N·ªôi dung ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ v√† ph√¢n t√≠ch',
        'Th√¥ng tin chi ti·∫øt c√≥ s·∫µn ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi'
      ]
    };

  } catch (error: any) {
    console.error('AI content analysis failed:', error.message);
    return {
      summary: `ƒê√£ truy c·∫≠p v√† t·∫£i n·ªôi dung t·ª´ ${url} th√†nh c√¥ng.`,
      keyPoints: [
        'Website ƒë√£ ƒë∆∞·ª£c truy c·∫≠p th√†nh c√¥ng',
        'N·ªôi dung ƒë√£ s·∫µn s√†ng ƒë·ªÉ ph√¢n t√≠ch',
        'C√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung n√†y'
      ]
    };
  }
}

/**
 * Validate URL
 */
function isValidUrl(url: string): boolean {
  try {
    const urlObj = new URL(url);
    return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
  } catch {
    return false;
  }
}

/**
 * Detect URL trong tin nh·∫Øn
 */
export function detectUrlsInMessage(message: string): string[] {
  const urlRegex = /https?:\/\/[^\s<>"'{}|\\^`\[\]]+/gi;
  const matches = message.match(urlRegex);
  return matches || [];
}

/**
 * Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu ph√¢n t√≠ch website kh√¥ng
 */
export function isWebAnalysisRequest(message: string): boolean {
  const keywords = [
    'ph√¢n t√≠ch website', 'ƒë·ªçc website', 't√≥m t·∫Øt website',
    'analyze website', 'read website', 'summarize website',
    'truy c·∫≠p trang', 'xem trang web', 'ƒë·ªçc trang',
    'l·∫•y th√¥ng tin t·ª´', 't√¨m hi·ªÉu v·ªÅ trang',
    'gi·∫£i th√≠ch website', 'm√¥ t·∫£ trang', 'website n√†y n√≥i g√¨'
  ];
  
  const messageWords = message.toLowerCase();
  const hasKeyword = keywords.some(keyword => messageWords.includes(keyword.toLowerCase()));
  const hasUrl = detectUrlsInMessage(message).length > 0;
  
  return hasKeyword || hasUrl;
}

/**
 * Suggest alternative URLs for failed requests
 */
export function suggestAlternativeUrls(originalUrl: string): string[] {
  try {
    const url = new URL(originalUrl);
    const suggestions = [];
    
    // Suggest homepage if it's a specific page
    if (url.pathname !== '/' && url.pathname !== '') {
      suggestions.push(`${url.protocol}//${url.host}`);
    }
    
    // Suggest common public pages
    const commonPages = ['/about', '/help', '/contact', '/blog', '/news'];
    commonPages.forEach(page => {
      if (!originalUrl.includes(page)) {
        suggestions.push(`${url.protocol}//${url.host}${page}`);
      }
    });
    
    return suggestions.slice(0, 3); // Limit to 3 suggestions
  } catch {
    return [];
  }
}

/**
 * Format k·∫øt qu·∫£ ph√¢n t√≠ch website
 */
export function formatWebAnalysisResult(result: WebScrapingResult): string {
  if (!result.success) {
    const suggestions = suggestAlternativeUrls(result.url);
    const suggestionText = suggestions.length > 0 
      ? `\n\nüîó **Th·ª≠ c√°c URL n√†y:**\n${suggestions.map(url => `‚Ä¢ ${url}`).join('\n')}`
      : '';
    
    return `‚ùå **Kh√¥ng th·ªÉ truy c·∫≠p website**

**URL:** ${result.url}
**L·ªói:** ${result.error}

üí° **G·ª£i √Ω:**
‚Ä¢ Ki·ªÉm tra URL c√≥ ƒë√∫ng kh√¥ng (bao g·ªìm http:// ho·∫∑c https://)
‚Ä¢ Website c√≥ th·ªÉ y√™u c·∫ßu ƒëƒÉng nh·∫≠p ho·∫∑c ch·ªâ cho ph√©p truy c·∫≠p t·ª´ tr√¨nh duy·ªát
‚Ä¢ Th·ª≠ v·ªõi trang ch·ªß c·ªßa website thay v√¨ trang con
‚Ä¢ M·ªôt s·ªë website ch·∫∑n truy c·∫≠p t·ª± ƒë·ªông ƒë·ªÉ b·∫£o m·∫≠t${suggestionText}`;
  }

  return `üåê **Ph√¢n t√≠ch Website Th√†nh C√¥ng**

**üîó URL:** ${result.url}
**üìã Ti√™u ƒë·ªÅ:** ${result.title}

**üìù T√≥m t·∫Øt:**
${result.summary}

**üîç ƒêi·ªÉm quan tr·ªçng:**
${result.keyPoints?.map(point => `‚Ä¢ ${point}`).join('\n')}

**‚è∞ Th·ªùi gian ph√¢n t√≠ch:** ${result.timestamp.toLocaleString('vi-VN')}

---

üí¨ **T√¥i ƒë√£ ƒë·ªçc v√† hi·ªÉu n·ªôi dung website n√†y. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t k·ª≥ ƒëi·ªÅu g√¨ v·ªÅ th√¥ng tin trong trang web!**`;
}