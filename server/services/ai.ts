import { GoogleGenerativeAI } from "@google/generative-ai";
import { GoogleGenAI, Modality } from "@google/genai";
import { WebBuilderService } from "./web-builder";
import { searchKnowledge, enhanceResponseWithKnowledge, startAutoLearning } from "./learning";
import { 
  scrapeAndAnalyzeWebsite, 
  detectUrlsInMessage, 
  isWebAnalysisRequest, 
  formatWebAnalysisResult 
} from "./web-scraper";
import { needsDeepSearch, performDeepSearch, formatDeepSearchResponse } from "./deep-search";
import { 
  getBestGeminiAPI, 
  handleGeminiAPIFailure, 
  getQuotaWarning,
  type FeatureType 
} from "./gemini-manager";
import * as fs from "fs";
import * as path from "path";
import * as fal from "@fal-ai/serverless-client";
import axios from "axios";
import FormData from "form-data";

export async function generateChatResponse(
  messages: Array<{
    role: string, 
    content: string, 
    attachments?: Array<{
      type: 'image' | 'video' | 'audio' | 'file';
      name: string;
      url: string;
      mimeType: string;
      size?: number;
    }> | null
  }>
): Promise<string> {
  try {
    const currentMessage = messages[messages.length - 1];
    let messageText = currentMessage.content;

    // Check cache first to save quota
    const { getCachedResponse, setCachedResponse } = await import("./quota-optimizer");
    const cachedResponse = getCachedResponse(messageText, 'chat');
    if (cachedResponse) {
      return cachedResponse;
    }
    // Convert message history to Gemini format
    const geminiHistory = messages.slice(0, -1).map(msg => {
      const parts: any[] = [{ text: msg.content }];
      
      // Add attachments if they exist and are supported types
      if (msg.attachments) {
        msg.attachments.forEach(attachment => {
          if ((attachment.type === 'image' || attachment.type === 'video') && attachment.url.startsWith('data:')) {
            const [, base64Data] = attachment.url.split(',');
            parts.push({
              inlineData: {
                mimeType: attachment.mimeType,
                data: base64Data
              }
            });
          }
        });
      }
      
      return {
        role: msg.role === "user" ? "user" : "model",
        parts
      };
    });

    // Get best available API for chat
    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) {
      console.error("No Gemini API available");
      const { generateFreeAIResponse } = await import('./free-ai.js');
      return await generateFreeAIResponse(messages[messages.length - 1].content, messages.slice(-5));
    }

    const { config: apiConfig, clients } = apiInfo;
    let chat;
    try {
      const model = clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      chat = model.startChat({
        history: geminiHistory
      });
      console.log(`ü§ñ Using Gemini API: ${apiConfig.name} for chat`);
    } catch (modelError: any) {
      console.error("Model initialization error:", modelError);
      handleGeminiAPIFailure(apiConfig.id, modelError);
      return generateFallbackResponse(messages[messages.length - 1].content);
    }

    // Get the latest user message with attachments
    const latestMessage = messages[messages.length - 1];
    const userMessage = latestMessage.content;
    
    // More comprehensive image generation detection with conversation context
    const messageTextLower = userMessage.toLowerCase();
    
    // Check if previous messages indicate we're in image generation context
    const recentMessages = messages.slice(-3); // Last 3 messages for context
    const hasImageContext = recentMessages.some(msg => 
      msg.role === 'assistant' && 
      (msg.content.includes('![Generated Image]') || msg.content.includes('ƒë√£ t·∫°o ·∫£nh'))
    );
    
    // Direct image generation keywords
    const directImageKeywords = [
      't·∫°o ·∫£nh', 'v·∫Ω ·∫£nh', 'generate image', 'create image', 'draw image',
      't·∫°o h√¨nh ·∫£nh', 'v·∫Ω h√¨nh', 'sinh ·∫£nh', 't·∫°o ra ·∫£nh', 'l√†m ·∫£nh',
      'v·∫Ω cho t√¥i', 't·∫°o cho t√¥i'
    ];
    
    // Context-based detection patterns
    const contextPatterns = [
      /·∫£nh.*?(con|m·ªôt|v·ªÅ|c·ªßa)/i,
      /h√¨nh.*?(con|m·ªôt|v·ªÅ|c·ªßa)/i,
      /picture.*?(of|a|an)/i,
      /image.*?(of|a|an)/i,
      /drawing.*?(of|a|an)/i,
      /(con|m·ªôt).*?(m√®o|ch√≥|ng∆∞·ªùi|ƒë·ªông v·∫≠t|c√¢y|hoa|n√∫i|bi·ªÉn)/i,
      /(a|an).*?(cat|dog|person|animal|tree|flower|mountain|ocean)/i
    ];
    
    // Follow-up patterns (when in image context)  
    const followUpPatterns = [
      /cho (n√≥|con|anh|c√¥|em).*(ƒëang|ƒÉn|ng·ªß|ch·∫°y|bay)/i,
      /(l√†m|ƒë·ªÉ|c√≥|v·ªõi).*(n√≥|con|anh|c√¥|em)/i,
      /th√™m.*(con|m·ªôt|c√°i|ng∆∞·ªùi)/i,
      /nh∆∞ng.*(con|m·ªôt|c√°i|ng∆∞·ªùi)/i,
      /(ƒëang|sedang).*(ƒÉn|ng·ªß|ch·∫°y|bay|l√†m)/i,
      /make.*it.*(eating|sleeping|running|flying)/i,
      /with.*(eating|sleeping|running|flying)/i,
      /add.*(cat|dog|person|animal)/i
    ];

    // Video generation detection patterns
    const videoGenerationKeywords = [
      't·∫°o video', 'l√†m video', 'generate video', 'create video', 'make video',
      'video c·ªßa', 'video v·ªÅ', 'quay video', 'ch·∫ø t·∫°o video', 'sinh video',
      'animatediff', 'animate diff', 't·∫°o video t·ª´ ·∫£nh', 'video t·ª´ ·∫£nh',
      'animate ·∫£nh', 'l√†m ·∫£nh ƒë·ªông', 'bi·∫øn ·∫£nh th√†nh video', 'image to video'
    ];
    
    const hasVideoKeyword = videoGenerationKeywords.some(keyword => 
      messageTextLower.includes(keyword.toLowerCase())
    );
    
    const hasDirectKeyword = directImageKeywords.some(keyword => 
      messageTextLower.includes(keyword.toLowerCase())
    );
    
    const hasContextPattern = contextPatterns.some(pattern => 
      pattern.test(messageText)
    );
    
    const hasFollowUpPattern = hasImageContext && followUpPatterns.some(pattern => 
      pattern.test(messageText)
    );
    
    const isImageGenerationRequest = hasDirectKeyword || hasContextPattern || hasFollowUpPattern;
    const isVideoGenerationRequest = hasVideoKeyword;
    
    // Check for website analysis requests
    const urls = detectUrlsInMessage(messageText);
    const isWebsiteAnalysisRequest = isWebAnalysisRequest(messageText) || urls.length > 0;
    
    // Check if user is asking for web development
    const webDevelopmentKeywords = [
      'x√¢y d·ª±ng web', 't·∫°o web', 'l√†m web', 'build web', 'website', 
      'trang web', 'html', 'css', 'javascript', 'frontend', 'backend',
      'code editor', 'web builder', 'ph√°t tri·ªÉn web', 't·∫°o file', 'vi·∫øt code'
    ];
    
    const isWebDevelopmentRequest = webDevelopmentKeywords.some(keyword => 
      messageText.toLowerCase().includes(keyword.toLowerCase())
    );

    // Check if user needs deep search
    const needsSearch = needsDeepSearch(messageText);
    let deepSearchResult = null;
    
    if (needsSearch) {
      console.log('üîç DeepSearch triggered for query:', messageText);
      try {
        deepSearchResult = await performDeepSearch(messageText);
      } catch (error) {
        console.error('DeepSearch failed:', error);
      }
    }

    // Enhanced prompt for web development requests
    if (isWebDevelopmentRequest) {
      messageText += `\n\nH∆∞·ªõng d·∫´n cho AI: ƒê√¢y l√† y√™u c·∫ßu ph√°t tri·ªÉn web. B·∫°n c√≥ th·ªÉ:
1. S·ª≠ d·ª•ng c√°c API ƒë·ªÉ t·ª± ƒë·ªông t·∫°o file: POST /api/web-builder/files v·ªõi {name, content}
2. T·∫°o th∆∞ m·ª•c: POST /api/web-builder/folders v·ªõi {name}
3. Ch·∫°y l·ªánh terminal: POST /api/web-builder/execute v·ªõi {command}
4. ƒê·ªçc file hi·ªán c√≥: GET /api/web-builder/files/:fileName
5. Li·ªát k√™ file: GET /api/web-builder/files

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë∆∞a ra k·∫ø ho·∫°ch c·ª• th·ªÉ v·ªÅ c√°c file c·∫ßn t·∫°o, sau ƒë√≥ t·ª± ƒë·ªông th·ª±c hi·ªán c√°c b∆∞·ªõc t·∫°o file/code.`;
    }
    
    // Add context for video analysis
    if (latestMessage.attachments?.some(a => a.type === 'video')) {
      messageText += "\n\nH√£y ph√¢n t√≠ch video n√†y chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát. M√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y trong video, c√°c ho·∫°t ƒë·ªông, ƒë·ªëi t∆∞·ª£ng, v√† b·∫•t k·ª≥ ƒëi·ªÅu g√¨ ƒë√°ng ch√∫ √Ω.";
    }
    
    const parts: any[] = [{ text: messageText }];
    
    // Add attachments to the latest message
    if (latestMessage.attachments) {
      latestMessage.attachments.forEach(attachment => {
        if ((attachment.type === 'image' || attachment.type === 'video') && attachment.url.startsWith('data:')) {
          const [, base64Data] = attachment.url.split(',');
          parts.push({
            inlineData: {
              mimeType: attachment.mimeType,
              data: base64Data
            }
          });
        }
      });
    }
    
    let response: string;
    
    // Handle website analysis requests
    if (isWebsiteAnalysisRequest && urls.length > 0) {
      console.log(`üåê Website analysis detected for: ${urls.join(', ')}`);
      
      try {
        // Analyze the first URL found
        const websiteResult = await scrapeAndAnalyzeWebsite(urls[0]);
        const analysisResponse = formatWebAnalysisResult(websiteResult);
        
        if (websiteResult.success) {
          // Add website content to context for further questions
          messageText += `\n\nN·ªôi dung website ƒë√£ ph√¢n t√≠ch:\n${websiteResult.content?.substring(0, 5000)}...`;
        }
        
        // Get AI response with website context
        const result = await chat.sendMessage(parts);
        const aiResponse = result.response.text() || "ƒê√£ ph√¢n t√≠ch website th√†nh c√¥ng.";
        
        response = `${analysisResponse}\n\n---\n\n${aiResponse}`;
      } catch (error: any) {
        console.error("Website analysis error:", error);
        response = `‚ùå **L·ªói khi ph√¢n t√≠ch website**\n\nURL: ${urls[0]}\nL·ªói: ${error.message}\n\nT√¥i v·∫´n c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi kh√°c c·ªßa b·∫°n!`;
      }
    }
    // Handle video generation requests
    else if (isVideoGenerationRequest) {
      console.log(`üé¨ Video generation detected for: "${messageText}"`);
      
      try {
        // Check if this is specifically an AnimateDiff request
        const { detectAnimateDiffRequest } = await import('./animatediff.js');
        const isAnimateDiff = detectAnimateDiffRequest(messageText);
        
        if (isAnimateDiff) {
          console.log('üé¨ AnimateDiff request detected');
          const { generateVideoAnimateDiff } = await import('./animatediff.js');
          
          // Check if there's a recent image to animate
          let imageUrl;
          const recentImageMessage = recentMessages.reverse().find(msg => 
            msg.role === 'assistant' && msg.content.includes('![Generated Image]')
          );
          
          if (recentImageMessage) {
            const imageMatch = recentImageMessage.content.match(/!\[Generated Image\]\(([^)]+)\)/);
            if (imageMatch) {
              imageUrl = imageMatch[1];
              console.log(`üñºÔ∏è Found recent image for animation: ${imageUrl}`);
            }
          }
          
          const animateResult = await generateVideoAnimateDiff(messageText, imageUrl);
          
          if (animateResult.success && animateResult.videoUrl) {
            response = `${animateResult.description}\n\nüé¨ [Video AnimateDiff](${animateResult.videoUrl})`;
          } else if (animateResult.description) {
            response = animateResult.description;
          } else {
            response = `‚ùå AnimateDiff t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng: ${animateResult.error}`;
          }
        } else {
          // Use regular video generation
          const videoResult = await generateVideo(messageText);
          
          if (videoResult.videoUrl && videoResult.description) {
            response = `${videoResult.description}\n\nüé¨ [Video t·∫°o th√†nh c√¥ng](${videoResult.videoUrl})`;
            console.log(`‚úÖ Video generation successful, URL: ${videoResult.videoUrl}`);
          } else if (videoResult.description) {
            response = videoResult.description;
          } else {
            response = `T√¥i hi·ªÉu b·∫°n mu·ªën t√¥i t·∫°o video "${messageText}", nh∆∞ng hi·ªán t·∫°i t√≠nh nƒÉng t·∫°o video g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.\n\nüí° **G·ª£i √Ω**: S·ª≠ d·ª•ng c·ª•m t·ª´ "t·∫°o video" r√µ r√†ng h∆°n.`;
          }
        }
      } catch (error) {
        console.error("Video generation error:", error);
        response = `Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o video ngay l√∫c n√†y do l·ªói k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.\n\nüîÑ **Th·ª≠ l·∫°i**: S·ª≠ d·ª•ng t·ª´ kh√≥a "t·∫°o video" r√µ r√†ng h∆°n.`;
      }
    }
    // Handle image generation requests
    else if (isImageGenerationRequest) {
      console.log(`üéØ Image generation detected for: "${messageText}"`);
      console.log(`üìã Context: Direct=${hasDirectKeyword}, Pattern=${hasContextPattern}, FollowUp=${hasFollowUpPattern}`);
      
      try {
        // For follow-up requests, enhance the prompt with context
        let enhancedPrompt = messageText;
        if (hasFollowUpPattern && !hasDirectKeyword) {
          // Get the last image generation context
          const lastImageMessage = recentMessages.reverse().find(msg => 
            msg.role === 'assistant' && msg.content.includes('![Generated Image]')
          );
          
          if (lastImageMessage) {
            // Extract what was previously generated
            const previousContext = lastImageMessage.content.split('\n')[0];
            enhancedPrompt = `T·∫°o ·∫£nh d·ª±a tr√™n: ${previousContext}. Nh∆∞ng b√¢y gi·ªù ${messageText}`;
            console.log(`üîÑ Enhanced follow-up prompt: "${enhancedPrompt}"`);
          }
        }
        
        const imageResult = await generateImage(enhancedPrompt);
        
        if (imageResult.imageUrl && imageResult.description) {
          response = `${imageResult.description}\n\n![Generated Image](${imageResult.imageUrl})`;
          console.log(`‚úÖ Image generation successful, URL: ${imageResult.imageUrl}`);
        } else if (imageResult.description) {
          // Return the description if no image URL (usually error messages)
          response = imageResult.description;
        } else {
          // Complete fallback
          response = `T√¥i hi·ªÉu b·∫°n mu·ªën t√¥i t·∫°o ·∫£nh "${messageText}", nh∆∞ng hi·ªán t·∫°i t√≠nh nƒÉng t·∫°o ·∫£nh g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.\n\nüí° **G·ª£i √Ω**: S·ª≠ d·ª•ng c·ª•m t·ª´ r√µ r√†ng nh∆∞ "t·∫°o ·∫£nh con m√®o" ho·∫∑c "v·∫Ω ·∫£nh phong c·∫£nh".`;
        }
      } catch (error) {
        console.error("Image generation error:", error);
        response = `Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ·∫£nh ngay l√∫c n√†y do l·ªói k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.\n\nüîÑ **Th·ª≠ l·∫°i**: S·ª≠ d·ª•ng t·ª´ kh√≥a "t·∫°o ·∫£nh" r√µ r√†ng h∆°n.`;
      }
    } else {
      // Normal chat response with error handling
      try {
        // Search for relevant knowledge first
        const relevantKnowledge = await searchKnowledge(messageText);
        
        if (relevantKnowledge.length > 0) {
          console.log(`üß† Found ${relevantKnowledge.length} relevant knowledge items`);
          
          // Add knowledge context to the message
          const knowledgeContext = relevantKnowledge
            .map(item => `üìö ${item.content}`)
            .join('\n');
          
          messageText += `\n\nKi·∫øn th·ª©c tham kh·∫£o:\n${knowledgeContext}`;
        }

        // Add DeepSearch results if available
        if (deepSearchResult && deepSearchResult.results.length > 0) {
          console.log(`üîç Adding DeepSearch results to context (${deepSearchResult.results.length} sources)`);
          const searchContext = `\n\nTh√¥ng tin t√¨m ki·∫øm real-time:\n${deepSearchResult.summary}`;
          parts[0].text = messageText + searchContext;
        }
        
        const result = await chat.sendMessage(parts);
        let aiResponse = result.response.text() || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi cho c√¢u h·ªèi n√†y.";
        
        // Enhance response with learned knowledge
        aiResponse = enhanceResponseWithKnowledge(messageText, aiResponse);
        
        // If we used DeepSearch, format the final response with sources
        if (deepSearchResult && deepSearchResult.results.length > 0) {
          response = `üîç **DeepSearch Results**\n\n${formatDeepSearchResponse(deepSearchResult, messageText)}\n\n---\n\n**Ph√¢n t√≠ch th√™m t·ª´ AI:**\n${aiResponse}`;
        } else {
          response = aiResponse;
        }
        
      } catch (chatError: any) {
        console.error("Chat API Error:", chatError);
        
        // Handle API failure and try backup APIs
        handleGeminiAPIFailure(apiConfig.id, chatError);
        
        // Try getting another API
        const backupApiInfo = getBestGeminiAPI('chat');
        if (backupApiInfo && backupApiInfo.config.id !== apiConfig.id) {
          console.log(`üîÑ Trying backup API: ${backupApiInfo.config.name}`);
          try {
            const backupModel = backupApiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
            const backupChat = backupModel.startChat({ history: geminiHistory });
            const result = await backupChat.sendMessage(parts);
            let aiResponse = result.response.text() || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi cho c√¢u h·ªèi n√†y.";
            
            // Enhance response with learned knowledge
            aiResponse = enhanceResponseWithKnowledge(messageText, aiResponse);
            
            // If we used DeepSearch, format the final response with sources
            if (deepSearchResult && deepSearchResult.results.length > 0) {
              response = `üîç **DeepSearch Results**\n\n${formatDeepSearchResponse(deepSearchResult, messageText)}\n\n---\n\n**Ph√¢n t√≠ch th√™m t·ª´ AI:**\n${aiResponse}`;
            } else {
              response = aiResponse;
            }
          } catch (backupError) {
            console.error("Backup API also failed:", backupError);
            handleGeminiAPIFailure(backupApiInfo.config.id, backupError);
            
            // If we have DeepSearch results, use them
            if (deepSearchResult && deepSearchResult.results.length > 0) {
              console.log("üîç Using DeepSearch results as primary response due to all API failures");
              response = `üîç **DeepSearch Results**\n\n${formatDeepSearchResponse(deepSearchResult, messageText)}`;
            } else {
              // Try free AI services first, then fallback
              try {
                const { generateFreeAIResponse } = await import('./free-ai.js');
                response = await generateFreeAIResponse(messageText, messages.slice(-5));
              } catch (freeError) {
                console.error("Free AI services failed:", freeError);
                response = generateFallbackResponse(messageText);
              }
            }
          }
        } else {
          // No backup APIs available, use DeepSearch or free services
          if (deepSearchResult && deepSearchResult.results.length > 0) {
            console.log("üîç Using DeepSearch results as primary response due to API failure");
            response = `üîç **DeepSearch Results**\n\n${formatDeepSearchResponse(deepSearchResult, messageText)}`;
          } else {
            // Try free AI services first, then fallback
            try {
              const { generateFreeAIResponse } = await import('./free-ai.js');
              response = await generateFreeAIResponse(messageText, messages.slice(-5));
            } catch (freeError) {
              console.error("Free AI services failed:", freeError);
              response = generateFallbackResponse(messageText);
            }
          }
        }
      }
    }
    
    // Auto-redirect for web development requests using Advanced Web Builder
    if (isWebDevelopmentRequest) {
      try {
        console.log('üåê Web development request detected, creating comprehensive project...');
        const { AdvancedWebBuilderService } = await import("./advanced-web-builder");
        const webBuilder = new AdvancedWebBuilderService();
        const projectInfo = await webBuilder.createAdvancedProjectFromAI(messageText);
        
        // Return special response that triggers auto-redirect to Web Builder
        response = `üåê **ƒêang t·∫°o website t·ª± ƒë·ªông...**

**Ph√¢n t√≠ch y√™u c·∫ßu:**
${projectInfo.analysis}

**ƒê√£ t·∫°o c√°c file:**
${projectInfo.files.map(f => `‚Ä¢ ${f.name} - ${f.description}`).join('\n')}

**T√≠nh nƒÉng ƒë√£ t√≠ch h·ª£p:**
${projectInfo.features.join('\n')}

---
**AUTO_REDIRECT:WEB_BUILDER** - T·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn Web Builder ƒë·ªÉ xem k·∫øt qu·∫£
**PROJECT_TYPE:${projectInfo.type}**
**STATUS:READY**`;
        
        // Early return to avoid normal processing
        return response;
      } catch (error) {
        console.error("Error executing advanced web development:", error);
        response += `\n\n‚ö†Ô∏è C√≥ l·ªói khi t·∫°o project web t·ª± ƒë·ªông. Vui l√≤ng th·ª≠ l·∫°i.`;
      }
    }
    
    // Enhance response with learned knowledge from internet
    response = enhanceResponseWithKnowledge(messageText, response);
    
    // Cache the response to save future quota
    const quotaOptimizer = await import("./quota-optimizer");
    quotaOptimizer.setCachedResponse(messageText, response, 'chat');

    // Add quota warning and tips if needed
    const quotaWarning = getQuotaWarning();
    if (quotaWarning) {
      response += `\n\n---\n\n${quotaWarning}`;
    }

    // Add quota saving suggestions for expensive operations
    const suggestions = quotaOptimizer.suggestQuotaSavingAlternatives(messageText);
    if (suggestions.length > 0) {
      response += `\n\n${suggestions.join('\n')}`;
    }
    
    return response;
  } catch (error: any) {
    console.error("AI API Error:", error);
    
    // Try free AI services before falling back
    let messageText = messages[messages.length - 1]?.content || "";
    try {
      const { generateFreeAIResponse } = await import('./free-ai.js');
      const freeResponse = await generateFreeAIResponse(messageText, messages.slice(-5));
      return freeResponse;
    } catch (freeError) {
      console.error("Free AI services also failed:", freeError);
      return generateFallbackResponse(messageText);
    }
  }
}

// Generate contextual fallback responses when AI API is unavailable
function generateFallbackResponse(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('video')) {
    return `üé¨ **T√≠nh nƒÉng t·∫°o video AI**

T√¥i c√≥ th·ªÉ t·∫°o video AI cho b·∫°n! H·ªá th·ªëng h·ªó tr·ª£ c√°c d·ªãch v·ª•:

**üÜì Mi·ªÖn ph√≠:**
‚Ä¢ **Hugging Face** - Token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
‚Ä¢ **Replicate** - Tin c·∫≠y nh·∫•t (c·∫ßn API token)

**üíé Tr·∫£ ph√≠:**
‚Ä¢ **fal.ai** - Ch·∫•t l∆∞·ª£ng cao ($0.40/video)

Th·ª≠ v·ªõi: "T·∫°o video con m√®o ƒëang ch·∫°y" ho·∫∑c m√¥ t·∫£ video b·∫°n mu·ªën!`;
  }
  
  if (lowerMessage.includes('h√¨nh') || lowerMessage.includes('·∫£nh')) {
    return `üé® **T√≠nh nƒÉng t·∫°o h√¨nh ·∫£nh AI**

T√¥i c√≥ th·ªÉ t·∫°o h√¨nh ·∫£nh AI ch·∫•t l∆∞·ª£ng cao cho b·∫°n! 

**C√°ch s·ª≠ d·ª•ng:**
‚Ä¢ M√¥ t·∫£ h√¨nh ·∫£nh b·∫°n mu·ªën
‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o v√† l∆∞u v√†o workspace
‚Ä¢ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß ti·∫øng Vi·ªát

Th·ª≠ v·ªõi: "T·∫°o h√¨nh ·∫£nh con m√®o d·ªÖ th∆∞∆°ng" ho·∫∑c m√¥ t·∫£ kh√°c!`;
  }
  
  if (lowerMessage.includes('web') || lowerMessage.includes('website')) {
    return `üåê **T√≠nh nƒÉng ph√°t tri·ªÉn web t·ª± ƒë·ªông**

T√¥i c√≥ th·ªÉ t·∫°o website ho√†n ch·ªânh cho b·∫°n!

**Lo·∫°i website h·ªó tr·ª£:**
‚Ä¢ Portfolio c√° nh√¢n
‚Ä¢ Landing page doanh nghi·ªáp  
‚Ä¢ Blog/tin t·ª©c
‚Ä¢ Ecommerce c∆° b·∫£n

Ch·ªâ c·∫ßn m√¥ t·∫£ website b·∫°n mu·ªën, t√¥i s·∫Ω t·ª± ƒë·ªông t·∫°o HTML, CSS, JavaScript!`;
  }
  
  // Generic helpful response
  return `üëã **Xin ch√†o! T√¥i l√† AI Assistant ti·∫øng Vi·ªát**

ü§ñ **API ƒëang t·∫°m th·ªùi qu√° t·∫£i** - S·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng sau v√†i ph√∫t

**üéØ T√≠nh nƒÉng ch√≠nh:**
‚Ä¢ **T·∫°o video AI** - M√¥ t·∫£ video b·∫°n mu·ªën
‚Ä¢ **T·∫°o h√¨nh ·∫£nh** - M√¥ t·∫£ h√¨nh ·∫£nh c·∫ßn thi·∫øt  
‚Ä¢ **Ph√°t tri·ªÉn web** - T·∫°o website t·ª± ƒë·ªông
‚Ä¢ **Chat AI** - Tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi

**üí° Th·ª≠ ngay:**
‚Ä¢ "T·∫°o video con m√®o ƒëang ch·∫°y"
‚Ä¢ "T·∫°o h√¨nh ·∫£nh phong c·∫£nh ƒë·∫πp"
‚Ä¢ "T·∫°o website portfolio cho t√¥i"

B·∫°n mu·ªën th·ª≠ t√≠nh nƒÉng n√†o?`;
}

async function executeWebDevelopmentTasks(userMessage: string, aiResponse: string): Promise<void> {
  try {
    // Check if this is a web development request
    const webKeywords = [
      'trang web', 'website', 'web', 'html', 'css', 'javascript', 'js', 
      'portfolio', 'landing page', 'blog', 'shop', 'store', 'gallery',
      'dashboard', 'admin', 'form', 'quiz', 'game', 'calculator'
    ];
    
    const isWebRequest = webKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword)
    );

    if (!isWebRequest) return;

    console.log('üîÑ AI ƒëang t·ª± ƒë·ªông t·∫°o d·ª± √°n web...');

    // Generate detailed project plan using AI
    const planningPrompt = `
Ph√¢n t√≠ch y√™u c·∫ßu sau v√† t·∫°o k·∫ø ho·∫°ch chi ti·∫øt ƒë·ªÉ x√¢y d·ª±ng trang web: "${userMessage}"

Tr·∫£ v·ªÅ response theo format JSON:
{
  "projectType": "portfolio|landing|blog|ecommerce|dashboard|other",
  "title": "Ti√™u ƒë·ªÅ trang web",
  "description": "M√¥ t·∫£ ng·∫Øn g·ªçn",
  "pages": ["index", "about", "contact"],
  "features": ["responsive", "animations", "forms"],
  "colorScheme": ["#primary", "#secondary", "#accent"],
  "content": {
    "heading": "Ti√™u ƒë·ªÅ ch√≠nh",
    "subtitle": "Ph·ª• ƒë·ªÅ",
    "sections": ["Hero", "About", "Services", "Contact"]
  }
}
`;

    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) throw new Error('No Gemini API available');
    const model = apiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const planResult = await model.generateContent(planningPrompt);
    const planText = planResult.response.text();
    
    let projectPlan;
    try {
      // Extract JSON from response
      const jsonMatch = planText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        projectPlan = JSON.parse(jsonMatch[0]);
      }
    } catch (e) {
      // Fallback plan if AI doesn't return proper JSON
      projectPlan = createFallbackPlan(userMessage);
    }

    if (!projectPlan) {
      projectPlan = createFallbackPlan(userMessage);
    }

    console.log('üìã K·∫ø ho·∫°ch d·ª± √°n:', projectPlan.title);

    // Generate complete HTML
    const htmlContent = await generateCompleteHTML(projectPlan);
    await WebBuilderService.createFile('index.html', htmlContent);
    console.log('‚úÖ ƒê√£ t·∫°o index.html');

    // Generate complete CSS
    const cssContent = await generateCompleteCSS(projectPlan);
    await WebBuilderService.createFile('style.css', cssContent);
    console.log('‚úÖ ƒê√£ t·∫°o style.css');

    // Generate complete JavaScript
    const jsContent = await generateCompleteJS(projectPlan);
    await WebBuilderService.createFile('script.js', jsContent);
    console.log('‚úÖ ƒê√£ t·∫°o script.js');

    // Create additional pages if needed
    if (projectPlan.pages && projectPlan.pages.length > 1) {
      for (const page of projectPlan.pages.slice(1)) {
        if (page !== 'index') {
          const pageContent = await generatePageHTML(projectPlan, page);
          await WebBuilderService.createFile(`${page}.html`, pageContent);
          console.log(`‚úÖ ƒê√£ t·∫°o ${page}.html`);
        }
      }
    }

    console.log('üéâ Ho√†n th√†nh t·ª± ƒë·ªông t·∫°o trang web!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·ª± ƒë·ªông t·∫°o web:', error);
  }
}

function createFallbackPlan(userMessage: string): any {
  const type = userMessage.toLowerCase().includes('portfolio') ? 'portfolio' :
               userMessage.toLowerCase().includes('shop') ? 'ecommerce' :
               userMessage.toLowerCase().includes('blog') ? 'blog' : 'landing';

  return {
    projectType: type,
    title: `Trang web ${type}`,
    description: "Trang web ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông",
    pages: ["index"],
    features: ["responsive", "modern"],
    colorScheme: ["#3B82F6", "#1E40AF", "#F59E0B"],
    content: {
      heading: "Ch√†o m·ª´ng",
      subtitle: "Trang web c·ªßa t√¥i",
      sections: ["Hero", "About", "Contact"]
    }
  };
}

async function generateCompleteHTML(plan: any): Promise<string> {
  const prompt = `
T·∫°o file HTML ho√†n ch·ªânh cho trang web ${plan.projectType} v·ªõi:
- Ti√™u ƒë·ªÅ: ${plan.title}
- Sections: ${plan.content.sections.join(', ')}
- Responsive design
- Modern structure
- Link t·ªõi style.css v√† script.js
- N·ªôi dung th·ª±c t·∫ø (kh√¥ng placeholder)

T·∫°o HTML production-ready v·ªõi SEO t·ªët v√† semantic markup.
`;

  try {
    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) throw new Error('No Gemini API available');
    const model = apiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = result.response.text();
    
    // Extract HTML from response
    const htmlMatch = response.match(/```html\n([\s\S]*?)```/) || response.match(/```\n([\s\S]*?)```/);
    if (htmlMatch) {
      return htmlMatch[1].trim();
    }
    
    // If no code blocks, check if response is pure HTML
    if (response.includes('<!DOCTYPE html>')) {
      return response.trim();
    }
    
    // Fallback HTML
    return createFallbackHTML(plan);
  } catch (error) {
    return createFallbackHTML(plan);
  }
}

async function generateCompleteCSS(plan: any): Promise<string> {
  const prompt = `
T·∫°o file CSS ho√†n ch·ªânh cho trang web ${plan.projectType} v·ªõi:
- Color scheme: ${plan.colorScheme.join(', ')}
- Modern design patterns
- Responsive breakpoints
- Smooth animations
- Professional typography
- Grid/Flexbox layouts

CSS ph·∫£i production-ready v√† modern.
`;

  try {
    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) throw new Error('No Gemini API available');
    const model = apiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = result.response.text();
    
    const cssMatch = response.match(/```css\n([\s\S]*?)```/) || response.match(/```\n([\s\S]*?)```/);
    if (cssMatch) {
      return cssMatch[1].trim();
    }
    
    if (response.includes('{') && response.includes('}')) {
      return response.trim();
    }
    
    return createFallbackCSS(plan);
  } catch (error) {
    return createFallbackCSS(plan);
  }
}

async function generateCompleteJS(plan: any): Promise<string> {
  const prompt = `
T·∫°o file JavaScript ho√†n ch·ªânh cho trang web ${plan.projectType} v·ªõi:
- Interactive features
- Smooth animations
- Form handling (n·∫øu c√≥)
- Mobile-friendly interactions
- Modern ES6+ syntax
- Performance optimized

JavaScript ph·∫£i production-ready v√† functional.
`;

  try {
    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) throw new Error('No Gemini API available');
    const model = apiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = result.response.text();
    
    const jsMatch = response.match(/```javascript\n([\s\S]*?)```/) || 
                   response.match(/```js\n([\s\S]*?)```/) || 
                   response.match(/```\n([\s\S]*?)```/);
    if (jsMatch) {
      return jsMatch[1].trim();
    }
    
    if (response.includes('function') || response.includes('const') || response.includes('document')) {
      return response.trim();
    }
    
    return createFallbackJS(plan);
  } catch (error) {
    return createFallbackJS(plan);
  }
}

async function generatePageHTML(plan: any, pageName: string): Promise<string> {
  const prompt = `
T·∫°o file HTML cho trang ${pageName} c·ªßa website ${plan.projectType}.
Trang n√†y ph·∫£i:
- C√≥ navigation link v·ªÅ trang ch·ªß
- N·ªôi dung ph√π h·ª£p v·ªõi t√™n trang
- C√πng style v·ªõi trang ch·ªß
- Link t·ªõi c√πng CSS v√† JS files
`;

  try {
    const apiInfo = getBestGeminiAPI('chat');
    if (!apiInfo) throw new Error('No Gemini API available');
    const model = apiInfo.clients.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = result.response.text();
    
    const htmlMatch = response.match(/```html\n([\s\S]*?)```/) || response.match(/```\n([\s\S]*?)```/);
    if (htmlMatch) {
      return htmlMatch[1].trim();
    }
    
    if (response.includes('<!DOCTYPE html>')) {
      return response.trim();
    }
    
    return createFallbackPageHTML(pageName, plan);
  } catch (error) {
    return createFallbackPageHTML(pageName, plan);
  }
}

function createFallbackHTML(plan: any): string {
  return `<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${plan.title}</title>
    <meta name="description" content="${plan.description}">
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header class="header">
        <nav class="nav">
            <div class="nav-brand">
                <h2>${plan.title}</h2>
            </div>
            <ul class="nav-links">
                <li><a href="#home">Trang ch·ªß</a></li>
                <li><a href="#about">Gi·ªõi thi·ªáu</a></li>
                <li><a href="#services">D·ªãch v·ª•</a></li>
                <li><a href="#contact">Li√™n h·ªá</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="home" class="hero">
            <div class="hero-content">
                <h1 class="hero-title">${plan.content.heading}</h1>
                <p class="hero-subtitle">${plan.content.subtitle}</p>
                <button class="cta-button">Kh√°m ph√° ngay</button>
            </div>
        </section>

        <section id="about" class="about">
            <div class="container">
                <h2>Gi·ªõi thi·ªáu</h2>
                <p>Ch√∫ng t√¥i chuy√™n cung c·∫•p c√°c gi·∫£i ph√°p ch·∫•t l∆∞·ª£ng cao v·ªõi s·ª± t·∫≠n t√¢m v√† chuy√™n nghi·ªáp.</p>
            </div>
        </section>

        <section id="services" class="services">
            <div class="container">
                <h2>D·ªãch v·ª•</h2>
                <div class="services-grid">
                    <div class="service-card">
                        <h3>D·ªãch v·ª• 1</h3>
                        <p>M√¥ t·∫£ d·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao.</p>
                    </div>
                    <div class="service-card">
                        <h3>D·ªãch v·ª• 2</h3>
                        <p>Gi·∫£i ph√°p t·ªëi ∆∞u cho nhu c·∫ßu c·ªßa b·∫°n.</p>
                    </div>
                    <div class="service-card">
                        <h3>D·ªãch v·ª• 3</h3>
                        <p>H·ªó tr·ª£ chuy√™n nghi·ªáp 24/7.</p>
                    </div>
                </div>
            </div>
        </section>

        <section id="contact" class="contact">
            <div class="container">
                <h2>Li√™n h·ªá</h2>
                <form class="contact-form">
                    <input type="text" placeholder="H·ªç t√™n" required>
                    <input type="email" placeholder="Email" required>
                    <textarea placeholder="Tin nh·∫Øn" required></textarea>
                    <button type="submit">G·ª≠i tin nh·∫Øn</button>
                </form>
            </div>
        </section>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ${plan.title}. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>`;
}

function createFallbackCSS(plan: any): string {
  return `/* Reset v√† Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    overflow-x: hidden;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}

.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}

.nav-brand h2 {
    color: ${plan.colorScheme[0]};
    font-size: 1.5rem;
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: ${plan.colorScheme[0]};
}

/* Hero Section */
.hero {
    height: 100vh;
    background: linear-gradient(135deg, ${plan.colorScheme[0]}, ${plan.colorScheme[1]});
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: white;
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="1"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.3;
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 600px;
    animation: fadeInUp 1s ease-out;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.hero-subtitle {
    font-size: 1.25rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.cta-button {
    background: ${plan.colorScheme[2]};
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 1px;
}

.cta-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}

/* Sections */
section {
    padding: 5rem 0;
}

.about, .contact {
    background: #f8f9fa;
}

.about h2, .services h2, .contact h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: ${plan.colorScheme[0]};
}

.about p {
    text-align: center;
    font-size: 1.2rem;
    max-width: 600px;
    margin: 0 auto;
    color: #666;
}

/* Services Grid */
.services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 3rem;
}

.service-card {
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.service-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
}

.service-card h3 {
    color: ${plan.colorScheme[0]};
    margin-bottom: 1rem;
    font-size: 1.5rem;
}

/* Contact Form */
.contact-form {
    max-width: 600px;
    margin: 0 auto;
    display: grid;
    gap: 1.5rem;
}

.contact-form input,
.contact-form textarea {
    padding: 1rem;
    border: 2px solid #e9ecef;
    border-radius: 10px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: ${plan.colorScheme[0]};
}

.contact-form textarea {
    min-height: 120px;
    resize: vertical;
}

.contact-form button {
    background: ${plan.colorScheme[0]};
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 10px;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background 0.3s ease;
}

.contact-form button:hover {
    background: ${plan.colorScheme[1]};
}

/* Footer */
.footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 2rem 0;
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive */
@media (max-width: 768px) {
    .nav {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-links {
        gap: 1rem;
    }
    
    .hero-title {
        font-size: 2.5rem;
    }
    
    .services-grid {
        grid-template-columns: 1fr;
    }
}

/* Smooth scrolling */
html {
    scroll-behavior: smooth;
}

/* Loading animations */
.fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
}

.fade-in.visible {
    opacity: 1;
    transform: translateY(0);
}`;
}

function createFallbackJS(plan: any): string {
  return `// Smooth scrolling v√† navigation
document.addEventListener('DOMContentLoaded', function() {
    // Smooth scroll for navigation links
    const navLinks = document.querySelectorAll('.nav-links a[href^="#"]');
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            if (targetSection) {
                targetSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Fade in animation for sections
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);

    // Add fade-in class to elements
    const animatedElements = document.querySelectorAll('.service-card, .about, .contact');
    animatedElements.forEach(el => {
        el.classList.add('fade-in');
        observer.observe(el);
    });

    // Header background on scroll
    const header = document.querySelector('.header');
    window.addEventListener('scroll', () => {
        if (window.scrollY > 100) {
            header.style.background = 'rgba(255, 255, 255, 0.98)';
        } else {
            header.style.background = 'rgba(255, 255, 255, 0.95)';
        }
    });

    // Contact form handling
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            // Simple validation
            const inputs = this.querySelectorAll('input, textarea');
            let isValid = true;
            
            inputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.style.borderColor = '#dc3545';
                } else {
                    input.style.borderColor = '#28a745';
                }
            });
            
            if (isValid) {
                // Simulate form submission
                const submitButton = this.querySelector('button[type="submit"]');
                const originalText = submitButton.textContent;
                submitButton.textContent = 'ƒêang g·ª≠i...';
                submitButton.disabled = true;
                
                setTimeout(() => {
                    alert('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.');
                    this.reset();
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    
                    // Reset border colors
                    inputs.forEach(input => {
                        input.style.borderColor = '#e9ecef';
                    });
                }, 1500);
            } else {
                alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
            }
        });
    }

    // CTA button animation
    const ctaButton = document.querySelector('.cta-button');
    if (ctaButton) {
        ctaButton.addEventListener('click', function() {
            const aboutSection = document.querySelector('#about');
            if (aboutSection) {
                aboutSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    }

    // Add typing effect to hero title
    const heroTitle = document.querySelector('.hero-title');
    if (heroTitle) {
        const text = heroTitle.textContent;
        heroTitle.textContent = '';
        heroTitle.style.borderRight = '3px solid white';
        
        let i = 0;
        const typeWriter = () => {
            if (i < text.length) {
                heroTitle.textContent += text.charAt(i);
                i++;
                setTimeout(typeWriter, 100);
            } else {
                setTimeout(() => {
                    heroTitle.style.borderRight = 'none';
                }, 1000);
            }
        };
        
        setTimeout(typeWriter, 1000);
    }

    // Mobile menu toggle (if needed)
    const createMobileMenu = () => {
        const nav = document.querySelector('.nav');
        const navLinks = document.querySelector('.nav-links');
        
        if (window.innerWidth <= 768) {
            // Add hamburger menu if it doesn't exist
            let hamburger = document.querySelector('.hamburger');
            if (!hamburger) {
                hamburger = document.createElement('button');
                hamburger.className = 'hamburger';
                hamburger.innerHTML = '‚ò∞';
                hamburger.style.cssText = 'background: none; border: none; font-size: 1.5rem; cursor: pointer;';
                nav.appendChild(hamburger);
                
                hamburger.addEventListener('click', () => {
                    navLinks.style.display = navLinks.style.display === 'flex' ? 'none' : 'flex';
                    navLinks.style.flexDirection = 'column';
                    navLinks.style.position = 'absolute';
                    navLinks.style.top = '100%';
                    navLinks.style.left = '0';
                    navLinks.style.right = '0';
                    navLinks.style.background = 'rgba(255, 255, 255, 0.98)';
                    navLinks.style.padding = '1rem';
                    navLinks.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
                });
            }
        }
    };
    
    createMobileMenu();
    window.addEventListener('resize', createMobileMenu);
});

// Add some interactive features
window.addEventListener('load', () => {
    console.log('üéâ Trang web ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!');
    console.log('‚ú® ƒê∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi AI');
});`;
}

function createFallbackPageHTML(pageName: string, plan: any): string {
  const pageTitle = pageName.charAt(0).toUpperCase() + pageName.slice(1);
  return `<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageTitle} - ${plan.title}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header class="header">
        <nav class="nav">
            <div class="nav-brand">
                <h2><a href="index.html" style="text-decoration: none; color: inherit;">${plan.title}</a></h2>
            </div>
            <ul class="nav-links">
                <li><a href="index.html">Trang ch·ªß</a></li>
                <li><a href="#main">${pageTitle}</a></li>
            </ul>
        </nav>
    </header>

    <main id="main" style="margin-top: 80px; padding: 4rem 0;">
        <div class="container">
            <h1 style="text-align: center; color: ${plan.colorScheme[0]}; margin-bottom: 2rem;">${pageTitle}</h1>
            <div style="max-width: 800px; margin: 0 auto; text-align: center;">
                <p style="font-size: 1.2rem; line-height: 1.8; color: #666;">
                    ƒê√¢y l√† trang ${pageTitle.toLowerCase()} c·ªßa website ${plan.title}. 
                    N·ªôi dung chi ti·∫øt s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·∫°i ƒë√¢y.
                </p>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 ${plan.title}. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>`;
}



export async function generateChatTitle(firstMessage: string): Promise<string> {
  try {
    // Simple title generation to avoid quota issues
    if (firstMessage.includes('video')) {
      return "T·∫°o video AI";
    }
    if (firstMessage.includes('h√¨nh') || firstMessage.includes('·∫£nh')) {
      return "T·∫°o h√¨nh ·∫£nh";
    }
    if (firstMessage.includes('web') || firstMessage.includes('website')) {
      return "Ph√°t tri·ªÉn web";
    }
    
    // Take first few words as title
    const words = firstMessage.split(' ').slice(0, 4);
    const title = words.join(' ');
    
    return title.length > 30 ? title.substring(0, 27) + "..." : title;
  } catch (error) {
    console.error("Title generation error:", error);
    return "Cu·ªôc tr√≤ chuy·ªán m·ªõi";
  }
}

// Helper function to check if API keys are available  
function hasVideoAPIKeys(): { service: string; available: boolean }[] {
  return [
    { service: 'replicate', available: !!process.env.REPLICATE_API_TOKEN },
    { service: 'huggingface', available: !!process.env.HUGGINGFACE_TOKEN },
    { service: 'hailuo', available: !!process.env.HAILUO_API_KEY },
    { service: 'fal_ai', available: !!process.env.FAL_KEY },
    { service: 'ai4chat', available: !!process.env.AI4CHAT_API_KEY }
  ];
}

// Function to call Replicate API for video generation (Reliable alternative)
async function generateVideoReplicate(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    if (!process.env.REPLICATE_API_TOKEN) {
      return { success: false, error: 'REPLICATE_API_TOKEN not configured' };
    }

    console.log('üîÑ Trying Replicate LTX-Video...');
    
    const response = await axios.post(
      'https://api.replicate.com/v1/predictions',
      {
        version: "5649e2b8cf2c34f04e1ab2c1d47a3f9c9085c61e5d7c72f2e6f3c83b0f1e6a8a", // LTX-Video on Replicate
        input: {
          prompt: prompt,
          width: 704,
          height: 480,
          num_frames: 121
        }
      },
      {
        headers: {
          'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 180000
      }
    );

    if (response.data?.urls?.get) {
      // Poll for completion
      let completed = false;
      let attempts = 0;
      const maxAttempts = 30;
      
      while (!completed && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
        
        const statusResponse = await axios.get(response.data.urls.get, {
          headers: {
            'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`
          }
        });
        
        if (statusResponse.data.status === 'succeeded' && statusResponse.data.output) {
          return { success: true, videoUrl: statusResponse.data.output[0] };
        }
        
        if (statusResponse.data.status === 'failed') {
          return { success: false, error: 'Video generation failed on Replicate' };
        }
        
        attempts++;
      }
      
      return { success: false, error: 'Video generation timed out' };
    }
    
    return { success: false, error: 'No prediction URL returned from Replicate' };
  } catch (error: any) {
    console.error('Replicate API error:', error.message);
    return { success: false, error: error.message };
  }
}

// Function to call Hugging Face API for video generation using LTX-Video
async function generateVideoHuggingFace(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    // Try alternative models that actually work on HF Inference API
    const models = [
      'ByteDance/AnimateDiff-Lightning',
      'ali-vilab/text-to-video-ms-1.7b',
      'damo-vilab/text-to-video-ms-1.7b'
    ];
    
    for (const model of models) {
      try {
        console.log(`üîÑ Trying ${model}...`);
        
        const response = await axios.post(
          `https://api-inference.huggingface.co/models/${model}`,
          { inputs: prompt },
          {
            headers: {
              'Authorization': `Bearer ${process.env.HUGGINGFACE_TOKEN}`,
              'Content-Type': 'application/json'
            },
            responseType: 'arraybuffer',
            timeout: 60000
          }
        );

        if (response.status === 200 && response.data.byteLength > 1000) {
          const timestamp = Date.now();
          const fileName = `hf_video_${timestamp}.mp4`;
          const filePath = path.join(process.cwd(), 'web-builder-workspace', fileName);
          
          await fs.promises.writeFile(filePath, Buffer.from(response.data));
          const videoUrl = `/web-builder-workspace/${fileName}`;
          
          console.log(`‚úÖ Video generated successfully via ${model}`);
          return { success: true, videoUrl };
        }
      } catch (modelError: any) {
        console.log(`‚ö†Ô∏è ${model} failed: ${modelError.message}`);
        continue;
      }
    }
    
    return { success: false, error: 'All Hugging Face video models are currently unavailable' };
    
  } catch (error: any) {
    console.error('Hugging Face API error:', error.message);
    return { success: false, error: `API Error: ${error.message}` };
  }
}

// Function to call Google Veo 2 API for video generation  
async function generateVideoGoogleVeo(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    // Note: This is a placeholder for Google Veo 2 implementation
    // The actual API endpoint may vary based on Google's official release
    const response = await axios.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-exp-video:generateContent',
      {
        contents: [{
          parts: [{ text: `Create a video: ${prompt}` }]
        }]
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.GEMINI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 120000
      }
    );

    if (response.data?.candidates?.[0]?.content?.parts?.[0]?.videoData) {
      const timestamp = Date.now();
      const fileName = `generated_video_${timestamp}.mp4`;
      const filePath = path.join(process.cwd(), 'web-builder-workspace', fileName);
      
      // Save video data to file
      const videoData = Buffer.from(response.data.candidates[0].content.parts[0].videoData, 'base64');
      await fs.promises.writeFile(filePath, videoData);
      const videoUrl = `/web-builder-workspace/${fileName}`;
      
      return { success: true, videoUrl };
    }
    
    return { success: false, error: 'Google Veo 2 API not yet available in production' };
  } catch (error: any) {
    console.error('Google Veo 2 API error:', error.message);
    return { success: false, error: `Google Veo 2 not ready: ${error.message}` };
  }
}

// Function to call Hailuo API for video generation (Free 100 daily credits)
async function generateVideoHailuo(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    if (!process.env.HAILUO_API_KEY) {
      return { success: false, error: 'HAILUO_API_KEY not configured' };
    }

    console.log('üîÑ Trying Hailuo MiniMax (100 free daily credits)...');
    
    const response = await axios.post(
      'https://api.minimax.chat/v1/video/generations',
      { 
        prompt: prompt,
        model: "video-01",
        duration: 6000  // 6 seconds
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.HAILUO_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 180000  // 3 minutes for video generation
      }
    );

    if (response.data?.video_url) {
      return { success: true, videoUrl: response.data.video_url };
    }
    
    return { success: false, error: 'No video URL returned from Hailuo' };
  } catch (error: any) {
    console.error('Hailuo API error:', error.message);
    return { success: false, error: error.message };
  }
}

// Function to call AI4Chat API for video generation
async function generateVideoAI4Chat(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    const response = await axios.post(
      'https://www.ai4chat.co/api/text-to-video',
      { prompt },
      {
        headers: {
          'Authorization': `Bearer ${process.env.AI4CHAT_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 90000
      }
    );

    if (response.data?.success && response.data?.video_url) {
      return { success: true, videoUrl: response.data.video_url };
    }
    
    return { success: false, error: 'No video URL returned' };
  } catch (error: any) {
    console.error('AI4Chat API error:', error.message);
    return { success: false, error: error.message };
  }
}

// Function to call fal.ai for video generation
async function generateVideoFalAI(prompt: string): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    if (!process.env.FAL_KEY) {
      return { success: false, error: 'FAL_KEY not configured' };
    }

    fal.config({ credentials: process.env.FAL_KEY });
    
    const result = await fal.subscribe("fal-ai/hunyuan-video", {
      input: {
        prompt: prompt,
        duration: "5s"
      }
    }) as any;

    if (result.data?.video?.url) {
      return { success: true, videoUrl: result.data.video.url };
    }
    
    return { success: false, error: 'No video URL returned from fal.ai' };
  } catch (error: any) {
    console.error('fal.ai API error:', error.message);
    return { success: false, error: error.message };
  }
}

// Video generation function using multiple free services
export async function generateVideo(prompt: string): Promise<{videoUrl?: string, description: string}> {
  console.log(`üé¨ Starting video generation for prompt: "${prompt}"`);
  
  try {
    // Clean the prompt to extract video description
    const cleanPrompt = prompt
      .replace(/t·∫°o video|l√†m video|generate video|create video|make video|video c·ªßa|video v·ªÅ|quay video|ch·∫ø t·∫°o video|sinh video/gi, '')
      .trim()
      .replace(/^(v·ªÅ|of|for|cho|m·ªôt|a|an|the)\s*/i, '');

    if (!cleanPrompt || cleanPrompt.length < 2) {
      return {
        description: "Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ video b·∫°n mu·ªën t√¥i t·∫°o.\n\nV√≠ d·ª•: 'T·∫°o video m·ªôt con m√®o ƒëang ch·∫°y tr√™n c·ªè' ho·∫∑c 'L√†m video phong c·∫£nh n√∫i non'."
      };
    }

    // Enhance prompt for better video generation
    const enhancedPrompt = `High-quality cinematic video of ${cleanPrompt}. Smooth motion, good lighting, professional cinematography.`;
    console.log(`üé¨ Enhanced prompt: "${enhancedPrompt}"`);

    // Check which API keys are available
    const availableServices = hasVideoAPIKeys();
    const hasAvailableAPI = availableServices.some(service => service.available);

    if (hasAvailableAPI) {
      console.log('üîë API keys detected, attempting video generation...');
      const errors: string[] = [];
      
      // Try services in order of preference (most reliable first)
      
      // 1. Try Replicate first (most reliable)
      if (process.env.REPLICATE_API_TOKEN) {
        console.log('üîÑ Trying Replicate LTX-Video...');
        const replicateResult = await generateVideoReplicate(enhancedPrompt);
        if (replicateResult.success && replicateResult.videoUrl) {
          return {
            videoUrl: replicateResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **Replicate LTX-Video**\nüéØ **D·ªãch v·ª• tin c·∫≠y** - Ch·∫•t l∆∞·ª£ng cao, ·ªïn ƒë·ªãnh\nüîó **Link video**: ${replicateResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: Video AI ch·∫•t l∆∞·ª£ng cao, 5-15 gi√¢y\nüí° **Tip**: Click v√†o link ƒë·ªÉ xem video!`
          };
        } else {
          errors.push(`Replicate: ${replicateResult.error}`);
        }
      }

      // 2. Try Hugging Face (fallback with working models)
      if (process.env.HUGGINGFACE_TOKEN) {
        console.log('üîÑ Trying Hugging Face alternative models...');
        const hfResult = await generateVideoHuggingFace(enhancedPrompt);
        if (hfResult.success && hfResult.videoUrl) {
          return {
            videoUrl: hfResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **Hugging Face**\nüéØ **Mi·ªÖn ph√≠ ho√†n to√†n** - Kh√¥ng gi·ªõi h·∫°n\nüìÅ **ƒê√£ l∆∞u v√†o workspace**: ${hfResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: Video AI ch·∫•t l∆∞·ª£ng t·ªët\nüí° **Tip**: B·∫°n c√≥ th·ªÉ xem v√† t·∫£i video t·ª´ workspace!`
          };
        } else {
          errors.push(`Hugging Face: ${hfResult.error}`);
        }
      }

      // 3. Try Hailuo MiniMax (100 free daily credits)
      if (process.env.HAILUO_API_KEY) {
        console.log('üîÑ Trying Hailuo MiniMax...');
        const hailuoResult = await generateVideoHailuo(enhancedPrompt);
        if (hailuoResult.success && hailuoResult.videoUrl) {
          return {
            videoUrl: hailuoResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **Hailuo MiniMax**\nüéØ **100 video mi·ªÖn ph√≠/ng√†y** - Ch·∫•t l∆∞·ª£ng cao\nüîó **Link video**: ${hailuoResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: 6 gi√¢y, realistic motion, subject reference\nüí° **Tip**: Click v√†o link ƒë·ªÉ xem video!`
          };
        } else {
          errors.push(`Hailuo: ${hailuoResult.error}`);
        }
      }

      // 4. Try AI4Chat (free API)
      if (process.env.AI4CHAT_API_KEY) {
        console.log('üîÑ Trying AI4Chat...');
        const ai4chatResult = await generateVideoAI4Chat(enhancedPrompt);
        if (ai4chatResult.success && ai4chatResult.videoUrl) {
          return {
            videoUrl: ai4chatResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **AI4Chat**\nüéØ **Mi·ªÖn ph√≠ ho√†n to√†n** - API kh√¥ng gi·ªõi h·∫°n\nüîó **Link video**: ${ai4chatResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: Text-to-video AI chuy√™n nghi·ªáp\nüí° **Tip**: Click v√†o link ƒë·ªÉ xem video!`
          };
        } else {
          errors.push(`AI4Chat: ${ai4chatResult.error}`);
        }
      }

      // 5. Try fal.ai (premium but efficient - $0.40/video)
      if (process.env.FAL_KEY) {
        console.log('üîÑ Trying fal.ai Hunyuan Video...');
        const falResult = await generateVideoFalAI(enhancedPrompt);
        if (falResult.success && falResult.videoUrl) {
          return {
            videoUrl: falResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **fal.ai Hunyuan Video**\nüíé **Ch·∫•t l∆∞·ª£ng cao** - 720p-1080p, $0.40/video\nüîó **Link video**: ${falResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: 13B parameters, realistic motion, 5-15 gi√¢y\nüí° **Tip**: Click v√†o link ƒë·ªÉ xem video HD!`
          };
        } else {
          errors.push(`fal.ai: ${falResult.error}`);
        }
      }

      // 5. Try Google Veo 2 (experimental - may not work yet)
      if (process.env.GEMINI_API_KEY && !process.env.HUGGINGFACE_TOKEN && !process.env.HAILUO_API_KEY && !process.env.AI4CHAT_API_KEY && !process.env.FAL_KEY) {
        console.log('üîÑ Trying Google Veo 2 (experimental)...');
        const veoResult = await generateVideoGoogleVeo(enhancedPrompt);
        if (veoResult.success && veoResult.videoUrl) {
          return {
            videoUrl: veoResult.videoUrl,
            description: `üé¨ **Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**\n\n‚úÖ T·∫°o video "${cleanPrompt}" b·∫±ng **Google Veo 2**\nüéØ **Mi·ªÖn ph√≠ qua Google AI Studio**\nüìÅ **ƒê√£ l∆∞u v√†o workspace**: ${veoResult.videoUrl}\n\nüé® **ƒê·∫∑c ƒëi·ªÉm**: Video ch·∫•t l∆∞·ª£ng c·ª±c cao t·ª´ Google\nüí° **Tip**: B·∫°n c√≥ th·ªÉ xem v√† t·∫£i video t·ª´ workspace!`
          };
        } else {
          errors.push(`Google Veo 2: ${veoResult.error}`);
        }
      }

      // If all services fail, show detailed error information
      const availableNames = availableServices.filter(s => s.available).map(s => {
        switch(s.service) {
          case 'replicate': return 'Replicate LTX-Video';
          case 'huggingface': return 'Hugging Face';
          case 'hailuo': return 'Hailuo MiniMax';
          case 'fal_ai': return 'fal.ai Hunyuan';
          case 'ai4chat': return 'AI4Chat';
          default: return s.service.toUpperCase();
        }
      });

      return {
        description: `‚ö†Ô∏è **T·∫•t c·∫£ d·ªãch v·ª• t·∫°o video g·∫∑p s·ª± c·ªë**

**üîß Chi ti·∫øt l·ªói:**
${errors.map(err => `‚Ä¢ ${err}`).join('\n')}

**üí° Gi·∫£i ph√°p kh·∫Øc ph·ª•c:**

**L·ªói th∆∞·ªùng g·∫∑p:**
‚Ä¢ **Model loading**: Hugging Face c·∫ßn 1-2 ph√∫t ƒë·ªÉ kh·ªüi ƒë·ªông model
‚Ä¢ **Rate limit**: API key ƒë√£ h·∫øt quota ho·∫∑c request qu√° nhanh  
‚Ä¢ **Network timeout**: K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh

**C√°ch kh·∫Øc ph·ª•c:**
üîÑ **Th·ª≠ l·∫°i sau 2-3 ph√∫t** (model Hugging Face c·∫ßn th·ªùi gian)
üîß **Ki·ªÉm tra API keys** c√≥ h·ª£p l·ªá kh√¥ng
üìù **Th·ª≠ prompt ƒë∆°n gi·∫£n h∆°n**: "m√®o ƒëang ch·∫°y", "xe √¥ t√¥", "c√¢y c·ªëi"

**D·ªãch v·ª• ƒë√£ th·ª≠:**
${availableNames.map(name => `‚Ä¢ ${name}`).join('\n')}

**üÜì Khuy·∫øn ngh·ªã:** H√£y th·ª≠ v·ªõi **Hugging Face token mi·ªÖn ph√≠** t·∫°i huggingface.co/settings/tokens`
      };
    }

    // No API keys available - show setup guide
    console.log('üí° Video generation demo mode - no API keys configured');
    
    return {
      description: `üé¨ **T√≠nh nƒÉng t·∫°o video AI ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p ho√†n to√†n!**

ƒê·ªÉ t·∫°o video "${cleanPrompt}", ·ª©ng d·ª•ng h·ªó tr·ª£ nhi·ªÅu d·ªãch v·ª• AI:

**üÜì D·ªäCH V·ª§ MI·ªÑN PH√ç (Khuy·∫øn ngh·ªã):**
‚Ä¢ **Hugging Face LTX-Video** - Ho√†n to√†n mi·ªÖn ph√≠, kh√¥ng gi·ªõi h·∫°n  
‚Ä¢ **Hailuo MiniMax** - 100 video mi·ªÖn ph√≠/ng√†y, ch·∫•t l∆∞·ª£ng cao
‚Ä¢ **AI4Chat Video** - API mi·ªÖn ph√≠ ho√†n to√†n cho text-to-video

**üíé D·ªäCH V·ª§ PREMIUM (Ch·∫•t l∆∞·ª£ng c·ª±c cao):**
‚Ä¢ **fal.ai Hunyuan Video** - 720p-1080p, $0.40/video  
‚Ä¢ **Google Veo 2** - Video ch·∫•t l∆∞·ª£ng cao, mi·ªÖn ph√≠ qua Google AI Studio

**üîß H∆Ø·ªöNG D·∫™N K√çCH HO·∫†T MI·ªÑN PH√ç:**

**üéØ C√°ch 1: Hugging Face (ƒê√£ c·∫•u h√¨nh - ƒêang ho·∫°t ƒë·ªông)**
‚úÖ Token ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng  
üîÑ ƒêang th·ª≠ c√°c model kh·∫£ d·ª•ng t·ª± ƒë·ªông
üì± S·ª≠ d·ª•ng ngay kh√¥ng c·∫ßn c·∫•u h√¨nh th√™m

**üèÜ C√°ch 2: Replicate (Khuy·∫øn ngh·ªã - Tin c·∫≠y nh·∫•t)**
1. Truy c·∫≠p: https://replicate.com/account/api-tokens
2. ƒêƒÉng nh·∫≠p/ƒëƒÉng k√Ω mi·ªÖn ph√≠
3. T·∫°o API token 
4. Th√™m v√†o ·ª©ng d·ª•ng

**üí° C√°ch 3: fal.ai (Ch·∫•t l∆∞·ª£ng cao - $0.40/video)**
1. Truy c·∫≠p: https://fal.ai/dashboard
2. T·∫°o t√†i kho·∫£n v√† l·∫•y API key
3. Ch·∫•t l∆∞·ª£ng video c·ª±c cao, t·ªëc ƒë·ªô nhanh

**üí° T·∫§T C·∫¢ ƒê√É S·∫¥N S√ÄNG:**
‚Ä¢ Video 5-15 gi√¢y, ƒë·ªô ph√¢n gi·∫£i 720p-1080p
‚Ä¢ Hi·ªÉu ho√†n h·∫£o ti·∫øng Vi·ªát
‚Ä¢ T·ª± ƒë·ªông l∆∞u file v√†o workspace  
‚Ä¢ T√≠ch h·ª£p s·∫µn trong chat

B·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt c√°ch l·∫•y API key n√†o?`
    };

  } catch (error) {
    console.error("‚ùå Video generation failed:", error);
    
    // Clean the prompt for error message
    const errorCleanPrompt = prompt
      .replace(/t·∫°o video|l√†m video|generate video|create video|make video|video c·ªßa|video v·ªÅ|quay video|ch·∫ø t·∫°o video|sinh video/gi, '')
      .trim()
      .replace(/^(v·ªÅ|of|for|cho|m·ªôt|a|an|the)\s*/i, '');
    
    // Return the demo response with API key guidance
    return {
      description: `üé¨ **T√≠nh nƒÉng t·∫°o video AI ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p ho√†n to√†n!**

ƒê·ªÉ t·∫°o video "${errorCleanPrompt || 'theo y√™u c·∫ßu'}", ·ª©ng d·ª•ng h·ªó tr·ª£ nhi·ªÅu d·ªãch v·ª• AI:

**üÜì D·ªäCH V·ª§ MI·ªÑN PH√ç (100% Free):**
‚Ä¢ **Google Veo 2** - Video ch·∫•t l∆∞·ª£ng cao, mi·ªÖn ph√≠ qua Google AI Studio
‚Ä¢ **Qwen 2.5 Max** - T·∫°o video kh√¥ng gi·ªõi h·∫°n, kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng
‚Ä¢ **AI4Chat Video** - API mi·ªÖn ph√≠ ho√†n to√†n cho text-to-video
‚Ä¢ **Hugging Face LTX-Video** - Mi·ªÖn ph√≠ v·ªõi API token
‚Ä¢ **Fliki AI Free Tier** - 5 ph√∫t video/th√°ng mi·ªÖn ph√≠

**üíé D·ªäCH V·ª§ PREMIUM (Ch·∫•t l∆∞·ª£ng cao):**
‚Ä¢ **fal.ai Hunyuan Video** - 720p-1080p, $0.4/video
‚Ä¢ **Kling AI** - Video realistic, $6.99/th√°ng  
‚Ä¢ **HeyGen** - AI avatars, $30/th√°ng
‚Ä¢ **Synthesia** - Video chuy√™n nghi·ªáp, $89/th√°ng

**üîß H∆Ø·ªöNG D·∫™N K√çCH HO·∫†T MI·ªÑN PH√ç:**

**C√°ch 1: Google Veo 2 (Khuy·∫øn ngh·ªã)**
1. Truy c·∫≠p: ai.google.dev/aistudio
2. ƒêƒÉng nh·∫≠p t√†i kho·∫£n Google
3. T·∫°o API key mi·ªÖn ph√≠
4. D√°n key v√†o ·ª©ng d·ª•ng

**C√°ch 2: Hugging Face (Ho√†n to√†n mi·ªÖn ph√≠)**
1. Truy c·∫≠p: huggingface.co/settings/tokens
2. T·∫°o token "Read" mi·ªÖn ph√≠
3. S·ª≠ d·ª•ng ngay kh√¥ng gi·ªõi h·∫°n

**üí° T·∫§T C·∫¢ ƒê√É S·∫¥N S√ÄNG:**
‚Ä¢ Video 5-60 gi√¢y, ƒë·ªô ph√¢n gi·∫£i cao
‚Ä¢ Hi·ªÉu ho√†n h·∫£o ti·∫øng Vi·ªát v√† ti·∫øng Anh  
‚Ä¢ T·ª± ƒë·ªông l∆∞u file v√†o workspace
‚Ä¢ T√≠ch h·ª£p s·∫µn trong chat, s·ª≠ d·ª•ng ngay

B·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt c√°ch l·∫•y API key n√†o?`
    };
  }
}

// Image generation function using Gemini 2.0 Flash
export async function generateImage(prompt: string): Promise<{imageUrl?: string, description: string}> {
  console.log(`üé® Starting image generation for prompt: "${prompt}"`);
  
  try {
    // Clean the prompt to extract image description
    const cleanPrompt = prompt
      .replace(/t·∫°o ·∫£nh|v·∫Ω ·∫£nh|generate image|create image|draw image|t·∫°o h√¨nh ·∫£nh|v·∫Ω h√¨nh|sinh ·∫£nh|t·∫°o ra ·∫£nh|l√†m ·∫£nh|v·∫Ω cho t√¥i|t·∫°o cho t√¥i|h√¨nh ·∫£nh|picture|drawing|image of|picture of|drawing of/gi, '')
      .trim()
      .replace(/^(v·ªÅ|of|for|cho|m·ªôt|a|an|the)\s*/i, '');

    if (!cleanPrompt || cleanPrompt.length < 2) {
      return {
        description: "Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ ·∫£nh b·∫°n mu·ªën t√¥i t·∫°o. \n\nV√≠ d·ª•: 'T·∫°o ·∫£nh m·ªôt con m√®o d·ªÖ th∆∞∆°ng ng·ªìi tr√™n c·ªè xanh' ho·∫∑c 'V·∫Ω ·∫£nh phong c·∫£nh n√∫i non h√πng vƒ©'."
      };
    }

    // Enhance prompt with more descriptive language
    const enhancedPrompt = `Create a high-quality, detailed image of ${cleanPrompt}. The image should be visually appealing, well-composed, and professionally rendered.`;

    console.log(`üé® Enhanced prompt: "${enhancedPrompt}"`);

    // Use the newer @google/genai package for image generation
    const apiInfo = getBestGeminiAPI('imageGeneration');
    if (!apiInfo) throw new Error('No Gemini API available for image generation');
    const response = await apiInfo.clients.genAI2.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: [{ role: "user", parts: [{ text: enhancedPrompt }] }],
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    console.log('üìä API Response received, processing...');

    const candidates = response.candidates;
    if (!candidates || candidates.length === 0) {
      console.error('‚ùå No candidates returned from API');
      throw new Error("No candidates returned from image generation API");
    }

    const content = candidates[0].content;
    if (!content || !content.parts) {
      console.error('‚ùå No content parts in API response');
      throw new Error("No content parts returned from image generation API");
    }

    let textResponse = "";
    let imageUrl = "";

    for (const part of content.parts) {
      if (part.text) {
        textResponse = part.text;
        console.log(`üìù Text response: ${part.text.substring(0, 100)}...`);
      } else if (part.inlineData && part.inlineData.data) {
        // Save image to a accessible path
        const timestamp = Date.now();
        const imageFileName = `generated_image_${timestamp}.png`;
        const imagePath = path.join(process.cwd(), 'web-builder-workspace', imageFileName);
        
        // Ensure directory exists
        const dir = path.dirname(imagePath);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }
        
        const imageData = Buffer.from(part.inlineData.data, "base64");
        fs.writeFileSync(imagePath, imageData);
        
        // Create accessible URL
        imageUrl = `/web-builder-workspace/${imageFileName}`;
        console.log(`‚úÖ Image saved successfully: ${imagePath}`);
        console.log(`üîó Image URL: ${imageUrl}`);
      }
    }

    if (!imageUrl) {
      console.error('‚ùå No image data found in API response');
      throw new Error("No image data received from API");
    }

    const result = {
      imageUrl,
      description: textResponse || `ƒê√£ t·∫°o ·∫£nh "${cleanPrompt}" th√†nh c√¥ng.`
    };
    
    console.log(`‚úÖ Image generation completed successfully: ${JSON.stringify(result)}`);
    return result;

  } catch (error) {
    console.error("‚ùå Image generation failed:", error);
    
    // Return specific error message instead of empty
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return {
      description: `Xin l·ªói, kh√¥ng th·ªÉ t·∫°o ·∫£nh ngay l√∫c n√†y. L·ªói: ${errorMessage}\n\nVui l√≤ng th·ª≠ l·∫°i sau.`
    };
  }
}
